{"ast":null,"code":"// lazyload\n(function (window, factory) {\n  // universal module definition\n  if (typeof module == 'object' && module.exports) {\n    // CommonJS\n    module.exports = factory(require('./core'), require('fizzy-ui-utils'));\n  } else {\n    // browser global\n    factory(window.Flickity, window.fizzyUIUtils);\n  }\n})(typeof window != 'undefined' ? window : this, function factory(Flickity, utils) {\n  const lazyAttr = 'data-flickity-lazyload';\n  const lazySrcAttr = `${lazyAttr}-src`;\n  const lazySrcsetAttr = `${lazyAttr}-srcset`;\n  const imgSelector = `img[${lazyAttr}], img[${lazySrcAttr}], ` + `img[${lazySrcsetAttr}], source[${lazySrcsetAttr}]`;\n\n  Flickity.create.lazyLoad = function () {\n    this.on('select', this.lazyLoad);\n    this.handleLazyLoadComplete = this.onLazyLoadComplete.bind(this);\n  };\n\n  let proto = Flickity.prototype;\n\n  proto.lazyLoad = function () {\n    let {\n      lazyLoad\n    } = this.options;\n    if (!lazyLoad) return; // get adjacent cells, use lazyLoad option for adjacent count\n\n    let adjCount = typeof lazyLoad == 'number' ? lazyLoad : 0; // lazy load images\n\n    this.getAdjacentCellElements(adjCount).map(getCellLazyImages).flat().forEach(img => new LazyLoader(img, this.handleLazyLoadComplete));\n  };\n\n  function getCellLazyImages(cellElem) {\n    // check if cell element is lazy image\n    if (cellElem.matches('img')) {\n      let cellAttr = cellElem.getAttribute(lazyAttr);\n      let cellSrcAttr = cellElem.getAttribute(lazySrcAttr);\n      let cellSrcsetAttr = cellElem.getAttribute(lazySrcsetAttr);\n\n      if (cellAttr || cellSrcAttr || cellSrcsetAttr) {\n        return cellElem;\n      }\n    } // select lazy images in cell\n\n\n    return [...cellElem.querySelectorAll(imgSelector)];\n  }\n\n  proto.onLazyLoadComplete = function (img, event) {\n    let cell = this.getParentCell(img);\n    let cellElem = cell && cell.element;\n    this.cellSizeChange(cellElem);\n    this.dispatchEvent('lazyLoad', event, cellElem);\n  }; // -------------------------- LazyLoader -------------------------- //\n\n  /**\n   * class to handle loading images\n   * @param {Image} img - Image element\n   * @param {Function} onComplete - callback function\n   */\n\n\n  function LazyLoader(img, onComplete) {\n    this.img = img;\n    this.onComplete = onComplete;\n    this.load();\n  }\n\n  LazyLoader.prototype.handleEvent = utils.handleEvent;\n\n  LazyLoader.prototype.load = function () {\n    this.img.addEventListener('load', this);\n    this.img.addEventListener('error', this); // get src & srcset\n\n    let src = this.img.getAttribute(lazyAttr) || this.img.getAttribute(lazySrcAttr);\n    let srcset = this.img.getAttribute(lazySrcsetAttr); // set src & serset\n\n    this.img.src = src;\n    if (srcset) this.img.setAttribute('srcset', srcset); // remove attr\n\n    this.img.removeAttribute(lazyAttr);\n    this.img.removeAttribute(lazySrcAttr);\n    this.img.removeAttribute(lazySrcsetAttr);\n  };\n\n  LazyLoader.prototype.onload = function (event) {\n    this.complete(event, 'flickity-lazyloaded');\n  };\n\n  LazyLoader.prototype.onerror = function (event) {\n    this.complete(event, 'flickity-lazyerror');\n  };\n\n  LazyLoader.prototype.complete = function (event, className) {\n    // unbind events\n    this.img.removeEventListener('load', this);\n    this.img.removeEventListener('error', this);\n    let mediaElem = this.img.parentNode.matches('picture') ? this.img.parentNode : this.img;\n    mediaElem.classList.add(className);\n    this.onComplete(this.img, event);\n  }; // -----  ----- //\n\n\n  Flickity.LazyLoader = LazyLoader;\n  return Flickity;\n});","map":{"version":3,"sources":["/Users/oti/Documents/QuiLib/node_modules/flickity/js/lazyload.js"],"names":["window","factory","module","exports","require","Flickity","fizzyUIUtils","utils","lazyAttr","lazySrcAttr","lazySrcsetAttr","imgSelector","create","lazyLoad","on","handleLazyLoadComplete","onLazyLoadComplete","bind","proto","prototype","options","adjCount","getAdjacentCellElements","map","getCellLazyImages","flat","forEach","img","LazyLoader","cellElem","matches","cellAttr","getAttribute","cellSrcAttr","cellSrcsetAttr","querySelectorAll","event","cell","getParentCell","element","cellSizeChange","dispatchEvent","onComplete","load","handleEvent","addEventListener","src","srcset","setAttribute","removeAttribute","onload","complete","onerror","className","removeEventListener","mediaElem","parentNode","classList","add"],"mappings":"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","sourcesContent":["// lazyload\n( function( window, factory ) {\n  // universal module definition\n  if ( typeof module == 'object' && module.exports ) {\n    // CommonJS\n    module.exports = factory(\n        require('./core'),\n        require('fizzy-ui-utils'),\n    );\n  } else {\n    // browser global\n    factory(\n        window.Flickity,\n        window.fizzyUIUtils,\n    );\n  }\n\n}( typeof window != 'undefined' ? window : this, function factory( Flickity, utils ) {\n\nconst lazyAttr = 'data-flickity-lazyload';\nconst lazySrcAttr = `${lazyAttr}-src`;\nconst lazySrcsetAttr = `${lazyAttr}-srcset`;\nconst imgSelector = `img[${lazyAttr}], img[${lazySrcAttr}], ` +\n  `img[${lazySrcsetAttr}], source[${lazySrcsetAttr}]`;\n\nFlickity.create.lazyLoad = function() {\n  this.on( 'select', this.lazyLoad );\n\n  this.handleLazyLoadComplete = this.onLazyLoadComplete.bind( this );\n};\n\nlet proto = Flickity.prototype;\n\nproto.lazyLoad = function() {\n  let { lazyLoad } = this.options;\n  if ( !lazyLoad ) return;\n\n  // get adjacent cells, use lazyLoad option for adjacent count\n  let adjCount = typeof lazyLoad == 'number' ? lazyLoad : 0;\n  // lazy load images\n  this.getAdjacentCellElements( adjCount )\n    .map( getCellLazyImages )\n    .flat()\n    .forEach( ( img ) => new LazyLoader( img, this.handleLazyLoadComplete ) );\n};\n\nfunction getCellLazyImages( cellElem ) {\n  // check if cell element is lazy image\n  if ( cellElem.matches('img') ) {\n    let cellAttr = cellElem.getAttribute( lazyAttr );\n    let cellSrcAttr = cellElem.getAttribute( lazySrcAttr );\n    let cellSrcsetAttr = cellElem.getAttribute( lazySrcsetAttr );\n    if ( cellAttr || cellSrcAttr || cellSrcsetAttr ) {\n      return cellElem;\n    }\n  }\n  // select lazy images in cell\n  return [ ...cellElem.querySelectorAll( imgSelector ) ];\n}\n\nproto.onLazyLoadComplete = function( img, event ) {\n  let cell = this.getParentCell( img );\n  let cellElem = cell && cell.element;\n  this.cellSizeChange( cellElem );\n\n  this.dispatchEvent( 'lazyLoad', event, cellElem );\n};\n\n// -------------------------- LazyLoader -------------------------- //\n\n/**\n * class to handle loading images\n * @param {Image} img - Image element\n * @param {Function} onComplete - callback function\n */\nfunction LazyLoader( img, onComplete ) {\n  this.img = img;\n  this.onComplete = onComplete;\n  this.load();\n}\n\nLazyLoader.prototype.handleEvent = utils.handleEvent;\n\nLazyLoader.prototype.load = function() {\n  this.img.addEventListener( 'load', this );\n  this.img.addEventListener( 'error', this );\n  // get src & srcset\n  let src = this.img.getAttribute( lazyAttr ) ||\n    this.img.getAttribute( lazySrcAttr );\n  let srcset = this.img.getAttribute( lazySrcsetAttr );\n  // set src & serset\n  this.img.src = src;\n  if ( srcset ) this.img.setAttribute( 'srcset', srcset );\n  // remove attr\n  this.img.removeAttribute( lazyAttr );\n  this.img.removeAttribute( lazySrcAttr );\n  this.img.removeAttribute( lazySrcsetAttr );\n};\n\nLazyLoader.prototype.onload = function( event ) {\n  this.complete( event, 'flickity-lazyloaded' );\n};\n\nLazyLoader.prototype.onerror = function( event ) {\n  this.complete( event, 'flickity-lazyerror' );\n};\n\nLazyLoader.prototype.complete = function( event, className ) {\n  // unbind events\n  this.img.removeEventListener( 'load', this );\n  this.img.removeEventListener( 'error', this );\n  let mediaElem = this.img.parentNode.matches('picture') ? this.img.parentNode : this.img;\n  mediaElem.classList.add( className );\n\n  this.onComplete( this.img, event );\n};\n\n// -----  ----- //\n\nFlickity.LazyLoader = LazyLoader;\n\nreturn Flickity;\n\n} ) );\n"]},"metadata":{},"sourceType":"script"}