{"ast":null,"code":"// Flickity main\n\n/* eslint-disable max-params */\n(function (window, factory) {\n  // universal module definition\n  if (typeof module == 'object' && module.exports) {\n    // CommonJS\n    module.exports = factory(window, require('ev-emitter'), require('get-size'), require('fizzy-ui-utils'), require('./cell'), require('./slide'), require('./animate'));\n  } else {\n    // browser global\n    let _Flickity = window.Flickity;\n    window.Flickity = factory(window, window.EvEmitter, window.getSize, window.fizzyUIUtils, _Flickity.Cell, _Flickity.Slide, _Flickity.animatePrototype);\n  }\n})(typeof window != 'undefined' ? window : this, function factory(window, EvEmitter, getSize, utils, Cell, Slide, animatePrototype) {\n  /* eslint-enable max-params */\n  // vars\n  const {\n    getComputedStyle,\n    console\n  } = window;\n  let {\n    jQuery\n  } = window; // -------------------------- Flickity -------------------------- //\n  // globally unique identifiers\n\n  let GUID = 0; // internal store of all Flickity intances\n\n  let instances = {};\n\n  function Flickity(element, options) {\n    let queryElement = utils.getQueryElement(element);\n\n    if (!queryElement) {\n      if (console) console.error(`Bad element for Flickity: ${queryElement || element}`);\n      return;\n    }\n\n    this.element = queryElement; // do not initialize twice on same element\n\n    if (this.element.flickityGUID) {\n      let instance = instances[this.element.flickityGUID];\n      if (instance) instance.option(options);\n      return instance;\n    } // add jQuery\n\n\n    if (jQuery) {\n      this.$element = jQuery(this.element);\n    } // options\n\n\n    this.options = { ...this.constructor.defaults\n    };\n    this.option(options); // kick things off\n\n    this._create();\n  }\n\n  Flickity.defaults = {\n    accessibility: true,\n    // adaptiveHeight: false,\n    cellAlign: 'center',\n    // cellSelector: undefined,\n    // contain: false,\n    freeScrollFriction: 0.075,\n    // friction when free-scrolling\n    friction: 0.28,\n    // friction when selecting\n    namespaceJQueryEvents: true,\n    // initialIndex: 0,\n    percentPosition: true,\n    resize: true,\n    selectedAttraction: 0.025,\n    setGallerySize: true // watchCSS: false,\n    // wrapAround: false\n\n  }; // hash of methods triggered on _create()\n\n  Flickity.create = {};\n  let proto = Flickity.prototype; // inherit EventEmitter\n\n  Object.assign(proto, EvEmitter.prototype);\n\n  proto._create = function () {\n    let {\n      resize,\n      watchCSS,\n      rightToLeft\n    } = this.options; // add id for Flickity.data\n\n    let id = this.guid = ++GUID;\n    this.element.flickityGUID = id; // expando\n\n    instances[id] = this; // associate via id\n    // initial properties\n\n    this.selectedIndex = 0; // how many frames slider has been in same position\n\n    this.restingFrames = 0; // initial physics properties\n\n    this.x = 0;\n    this.velocity = 0;\n    this.beginMargin = rightToLeft ? 'marginRight' : 'marginLeft';\n    this.endMargin = rightToLeft ? 'marginLeft' : 'marginRight'; // create viewport & slider\n\n    this.viewport = document.createElement('div');\n    this.viewport.className = 'flickity-viewport';\n\n    this._createSlider(); // used for keyboard navigation\n\n\n    this.focusableElems = [this.element];\n\n    if (resize || watchCSS) {\n      window.addEventListener('resize', this);\n    } // add listeners from on option\n\n\n    for (let eventName in this.options.on) {\n      let listener = this.options.on[eventName];\n      this.on(eventName, listener);\n    }\n\n    for (let method in Flickity.create) {\n      Flickity.create[method].call(this);\n    }\n\n    if (watchCSS) {\n      this.watchCSS();\n    } else {\n      this.activate();\n    }\n  };\n  /**\n   * set options\n   * @param {Object} opts - options to extend\n   */\n\n\n  proto.option = function (opts) {\n    Object.assign(this.options, opts);\n  };\n\n  proto.activate = function () {\n    if (this.isActive) return;\n    this.isActive = true;\n    this.element.classList.add('flickity-enabled');\n\n    if (this.options.rightToLeft) {\n      this.element.classList.add('flickity-rtl');\n    }\n\n    this.getSize(); // move initial cell elements so they can be loaded as cells\n\n    let cellElems = this._filterFindCellElements(this.element.children);\n\n    this.slider.append(...cellElems);\n    this.viewport.append(this.slider);\n    this.element.append(this.viewport); // get cells from children\n\n    this.reloadCells();\n\n    if (this.options.accessibility) {\n      // allow element to focusable\n      this.element.tabIndex = 0; // listen for key presses\n\n      this.element.addEventListener('keydown', this);\n    }\n\n    this.emitEvent('activate');\n    this.selectInitialIndex(); // flag for initial activation, for using initialIndex\n\n    this.isInitActivated = true; // ready event. #493\n\n    this.dispatchEvent('ready');\n  }; // slider positions the cells\n\n\n  proto._createSlider = function () {\n    // slider element does all the positioning\n    let slider = document.createElement('div');\n    slider.className = 'flickity-slider';\n    this.slider = slider;\n  };\n\n  proto._filterFindCellElements = function (elems) {\n    return utils.filterFindElements(elems, this.options.cellSelector);\n  }; // goes through all children\n\n\n  proto.reloadCells = function () {\n    // collection of item elements\n    this.cells = this._makeCells(this.slider.children);\n    this.positionCells();\n\n    this._updateWrapShiftCells();\n\n    this.setGallerySize();\n  };\n  /**\n   * turn elements into Flickity.Cells\n   * @param {[Array, NodeList, HTMLElement]} elems - elements to make into cells\n   * @returns {Array} items - collection of new Flickity Cells\n   */\n\n\n  proto._makeCells = function (elems) {\n    let cellElems = this._filterFindCellElements(elems); // create new Cells for collection\n\n\n    return cellElems.map(cellElem => new Cell(cellElem));\n  };\n\n  proto.getLastCell = function () {\n    return this.cells[this.cells.length - 1];\n  };\n\n  proto.getLastSlide = function () {\n    return this.slides[this.slides.length - 1];\n  }; // positions all cells\n\n\n  proto.positionCells = function () {\n    // size all cells\n    this._sizeCells(this.cells); // position all cells\n\n\n    this._positionCells(0);\n  };\n  /**\n   * position certain cells\n   * @param {Integer} index - which cell to start with\n   */\n\n\n  proto._positionCells = function (index) {\n    index = index || 0; // also measure maxCellHeight\n    // start 0 if positioning all cells\n\n    this.maxCellHeight = index ? this.maxCellHeight || 0 : 0;\n    let cellX = 0; // get cellX\n\n    if (index > 0) {\n      let startCell = this.cells[index - 1];\n      cellX = startCell.x + startCell.size.outerWidth;\n    }\n\n    this.cells.slice(index).forEach(cell => {\n      cell.x = cellX;\n\n      this._renderCellPosition(cell, cellX);\n\n      cellX += cell.size.outerWidth;\n      this.maxCellHeight = Math.max(cell.size.outerHeight, this.maxCellHeight);\n    }); // keep track of cellX for wrap-around\n\n    this.slideableWidth = cellX; // slides\n\n    this.updateSlides(); // contain slides target\n\n    this._containSlides(); // update slidesWidth\n\n\n    this.slidesWidth = this.cells.length ? this.getLastSlide().target - this.slides[0].target : 0;\n  };\n\n  proto._renderCellPosition = function (cell, x) {\n    // render position of cell with in slider\n    let sideOffset = this.options.rightToLeft ? -1 : 1;\n    let renderX = x * sideOffset;\n    if (this.options.percentPosition) renderX *= this.size.innerWidth / cell.size.width;\n    let positionValue = this.getPositionValue(renderX);\n    cell.element.style.transform = `translateX( ${positionValue} )`;\n  };\n  /**\n   * cell.getSize() on multiple cells\n   * @param {Array} cells - cells to size\n   */\n\n\n  proto._sizeCells = function (cells) {\n    cells.forEach(cell => cell.getSize());\n  }; // --------------------------  -------------------------- //\n\n\n  proto.updateSlides = function () {\n    this.slides = [];\n    if (!this.cells.length) return;\n    let {\n      beginMargin,\n      endMargin\n    } = this;\n    let slide = new Slide(beginMargin, endMargin, this.cellAlign);\n    this.slides.push(slide);\n\n    let canCellFit = this._getCanCellFit();\n\n    this.cells.forEach((cell, i) => {\n      // just add cell if first cell in slide\n      if (!slide.cells.length) {\n        slide.addCell(cell);\n        return;\n      }\n\n      let slideWidth = slide.outerWidth - slide.firstMargin + (cell.size.outerWidth - cell.size[endMargin]);\n\n      if (canCellFit(i, slideWidth)) {\n        slide.addCell(cell);\n      } else {\n        // doesn't fit, new slide\n        slide.updateTarget();\n        slide = new Slide(beginMargin, endMargin, this.cellAlign);\n        this.slides.push(slide);\n        slide.addCell(cell);\n      }\n    }); // last slide\n\n    slide.updateTarget(); // update .selectedSlide\n\n    this.updateSelectedSlide();\n  };\n\n  proto._getCanCellFit = function () {\n    let {\n      groupCells\n    } = this.options;\n    if (!groupCells) return () => false;\n\n    if (typeof groupCells == 'number') {\n      // group by number. 3 -> [0,1,2], [3,4,5], ...\n      let number = parseInt(groupCells, 10);\n      return i => i % number !== 0;\n    } // default, group by width of slide\n\n\n    let percent = 1; // parse '75%\n\n    let percentMatch = typeof groupCells == 'string' && groupCells.match(/^(\\d+)%$/);\n    if (percentMatch) percent = parseInt(percentMatch[1], 10) / 100;\n    let groupWidth = (this.size.innerWidth + 1) * percent;\n    return (i, slideWidth) => slideWidth <= groupWidth;\n  }; // alias _init for jQuery plugin .flickity()\n\n\n  proto._init = proto.reposition = function () {\n    this.positionCells();\n    this.positionSliderAtSelected();\n  };\n\n  proto.getSize = function () {\n    this.size = getSize(this.element);\n    this.setCellAlign();\n    this.cursorPosition = this.size.innerWidth * this.cellAlign;\n  };\n\n  let cellAlignShorthands = {\n    left: 0,\n    center: 0.5,\n    right: 1\n  };\n\n  proto.setCellAlign = function () {\n    let {\n      cellAlign,\n      rightToLeft\n    } = this.options;\n    let shorthand = cellAlignShorthands[cellAlign];\n    this.cellAlign = shorthand !== undefined ? shorthand : cellAlign;\n    if (rightToLeft) this.cellAlign = 1 - this.cellAlign;\n  };\n\n  proto.setGallerySize = function () {\n    if (!this.options.setGallerySize) return;\n    let height = this.options.adaptiveHeight && this.selectedSlide ? this.selectedSlide.height : this.maxCellHeight;\n    this.viewport.style.height = `${height}px`;\n  };\n\n  proto._updateWrapShiftCells = function () {\n    // update isWrapping\n    this.isWrapping = this.getIsWrapping(); // only for wrap-around\n\n    if (!this.isWrapping) return; // unshift previous cells\n\n    this._unshiftCells(this.beforeShiftCells);\n\n    this._unshiftCells(this.afterShiftCells); // get before cells\n    // initial gap\n\n\n    let beforeGapX = this.cursorPosition;\n    let lastIndex = this.cells.length - 1;\n    this.beforeShiftCells = this._getGapCells(beforeGapX, lastIndex, -1); // get after cells\n    // ending gap between last cell and end of gallery viewport\n\n    let afterGapX = this.size.innerWidth - this.cursorPosition; // start cloning at first cell, working forwards\n\n    this.afterShiftCells = this._getGapCells(afterGapX, 0, 1);\n  };\n\n  proto.getIsWrapping = function () {\n    let {\n      wrapAround\n    } = this.options;\n    if (!wrapAround || this.slides.length < 2) return false;\n    if (wrapAround !== 'fill') return true; // check that slides can fit\n\n    let gapWidth = this.slideableWidth - this.size.innerWidth;\n    if (gapWidth > this.size.innerWidth) return true; // gap * 2x big, all good\n    // check that content width - shifting cell is bigger than viewport width\n\n    for (let cell of this.cells) {\n      if (cell.size.outerWidth > gapWidth) return false;\n    }\n\n    return true;\n  };\n\n  proto._getGapCells = function (gapX, cellIndex, increment) {\n    // keep adding cells until the cover the initial gap\n    let cells = [];\n\n    while (gapX > 0) {\n      let cell = this.cells[cellIndex];\n      if (!cell) break;\n      cells.push(cell);\n      cellIndex += increment;\n      gapX -= cell.size.outerWidth;\n    }\n\n    return cells;\n  }; // ----- contain & wrap ----- //\n  // contain cell targets so no excess sliding\n\n\n  proto._containSlides = function () {\n    let isContaining = this.options.contain && !this.isWrapping && this.cells.length;\n    if (!isContaining) return;\n    let contentWidth = this.slideableWidth - this.getLastCell().size[this.endMargin]; // content is less than gallery size\n\n    let isContentSmaller = contentWidth < this.size.innerWidth;\n\n    if (isContentSmaller) {\n      // all cells fit inside gallery\n      this.slides.forEach(slide => {\n        slide.target = contentWidth * this.cellAlign;\n      });\n    } else {\n      // contain to bounds\n      let beginBound = this.cursorPosition + this.cells[0].size[this.beginMargin];\n      let endBound = contentWidth - this.size.innerWidth * (1 - this.cellAlign);\n      this.slides.forEach(slide => {\n        slide.target = Math.max(slide.target, beginBound);\n        slide.target = Math.min(slide.target, endBound);\n      });\n    }\n  }; // ----- events ----- //\n\n  /**\n   * emits events via eventEmitter and jQuery events\n   * @param {String} type - name of event\n   * @param {Event} event - original event\n   * @param {Array} args - extra arguments\n   */\n\n\n  proto.dispatchEvent = function (type, event, args) {\n    let emitArgs = event ? [event].concat(args) : args;\n    this.emitEvent(type, emitArgs);\n\n    if (jQuery && this.$element) {\n      // default trigger with type if no event\n      type += this.options.namespaceJQueryEvents ? '.flickity' : '';\n      let $event = type;\n\n      if (event) {\n        // create jQuery event\n        let jQEvent = new jQuery.Event(event);\n        jQEvent.type = type;\n        $event = jQEvent;\n      }\n\n      this.$element.trigger($event, args);\n    }\n  };\n\n  const unidraggerEvents = ['dragStart', 'dragMove', 'dragEnd', 'pointerDown', 'pointerMove', 'pointerEnd', 'staticClick'];\n  let _emitEvent = proto.emitEvent;\n\n  proto.emitEvent = function (eventName, args) {\n    if (eventName === 'staticClick') {\n      // add cellElem and cellIndex args to staticClick\n      let clickedCell = this.getParentCell(args[0].target);\n      let cellElem = clickedCell && clickedCell.element;\n      let cellIndex = clickedCell && this.cells.indexOf(clickedCell);\n      args = args.concat(cellElem, cellIndex);\n    } // do regular thing\n\n\n    _emitEvent.call(this, eventName, args); // duck-punch in jQuery events for Unidragger events\n\n\n    let isUnidraggerEvent = unidraggerEvents.includes(eventName);\n    if (!isUnidraggerEvent || !jQuery || !this.$element) return;\n    eventName += this.options.namespaceJQueryEvents ? '.flickity' : '';\n    let event = args.shift(0);\n    let jQEvent = new jQuery.Event(event);\n    jQEvent.type = eventName;\n    this.$element.trigger(jQEvent, args);\n  }; // -------------------------- select -------------------------- //\n\n  /**\n   * @param {Integer} index - index of the slide\n   * @param {Boolean} isWrap - will wrap-around to last/first if at the end\n   * @param {Boolean} isInstant - will immediately set position at selected cell\n   */\n\n\n  proto.select = function (index, isWrap, isInstant) {\n    if (!this.isActive) return;\n    index = parseInt(index, 10);\n\n    this._wrapSelect(index);\n\n    if (this.isWrapping || isWrap) {\n      index = utils.modulo(index, this.slides.length);\n    } // bail if invalid index\n\n\n    if (!this.slides[index]) return;\n    let prevIndex = this.selectedIndex;\n    this.selectedIndex = index;\n    this.updateSelectedSlide();\n\n    if (isInstant) {\n      this.positionSliderAtSelected();\n    } else {\n      this.startAnimation();\n    }\n\n    if (this.options.adaptiveHeight) {\n      this.setGallerySize();\n    } // events\n\n\n    this.dispatchEvent('select', null, [index]); // change event if new index\n\n    if (index !== prevIndex) {\n      this.dispatchEvent('change', null, [index]);\n    }\n  }; // wraps position for wrapAround, to move to closest slide. #113\n\n\n  proto._wrapSelect = function (index) {\n    if (!this.isWrapping) return;\n    const {\n      selectedIndex,\n      slideableWidth,\n      slides: {\n        length\n      }\n    } = this; // shift index for wrap, do not wrap dragSelect\n\n    if (!this.isDragSelect) {\n      let wrapIndex = utils.modulo(index, length); // go to shortest\n\n      let delta = Math.abs(wrapIndex - selectedIndex);\n      let backWrapDelta = Math.abs(wrapIndex + length - selectedIndex);\n      let forewardWrapDelta = Math.abs(wrapIndex - length - selectedIndex);\n\n      if (backWrapDelta < delta) {\n        index += length;\n      } else if (forewardWrapDelta < delta) {\n        index -= length;\n      }\n    } // wrap position so slider is within normal area\n\n\n    if (index < 0) {\n      this.x -= slideableWidth;\n    } else if (index >= length) {\n      this.x += slideableWidth;\n    }\n  };\n\n  proto.previous = function (isWrap, isInstant) {\n    this.select(this.selectedIndex - 1, isWrap, isInstant);\n  };\n\n  proto.next = function (isWrap, isInstant) {\n    this.select(this.selectedIndex + 1, isWrap, isInstant);\n  };\n\n  proto.updateSelectedSlide = function () {\n    let slide = this.slides[this.selectedIndex]; // selectedIndex could be outside of slides, if triggered before resize()\n\n    if (!slide) return; // unselect previous selected slide\n\n    this.unselectSelectedSlide(); // update new selected slide\n\n    this.selectedSlide = slide;\n    slide.select();\n    this.selectedCells = slide.cells;\n    this.selectedElements = slide.getCellElements(); // HACK: selectedCell & selectedElement is first cell in slide, backwards compatibility\n\n    this.selectedCell = slide.cells[0];\n    this.selectedElement = this.selectedElements[0];\n  };\n\n  proto.unselectSelectedSlide = function () {\n    if (this.selectedSlide) this.selectedSlide.unselect();\n  };\n\n  proto.selectInitialIndex = function () {\n    let initialIndex = this.options.initialIndex; // already activated, select previous selectedIndex\n\n    if (this.isInitActivated) {\n      this.select(this.selectedIndex, false, true);\n      return;\n    } // select with selector string\n\n\n    if (initialIndex && typeof initialIndex == 'string') {\n      let cell = this.queryCell(initialIndex);\n\n      if (cell) {\n        this.selectCell(initialIndex, false, true);\n        return;\n      }\n    }\n\n    let index = 0; // select with number\n\n    if (initialIndex && this.slides[initialIndex]) {\n      index = initialIndex;\n    } // select instantly\n\n\n    this.select(index, false, true);\n  };\n  /**\n   * select slide from number or cell element\n   * @param {[Element, Number]} value - zero-based index or element to select\n   * @param {Boolean} isWrap - enables wrapping around for extra index\n   * @param {Boolean} isInstant - disables slide animation\n   */\n\n\n  proto.selectCell = function (value, isWrap, isInstant) {\n    // get cell\n    let cell = this.queryCell(value);\n    if (!cell) return;\n    let index = this.getCellSlideIndex(cell);\n    this.select(index, isWrap, isInstant);\n  };\n\n  proto.getCellSlideIndex = function (cell) {\n    // get index of slide that has cell\n    let cellSlide = this.slides.find(slide => slide.cells.includes(cell));\n    return this.slides.indexOf(cellSlide);\n  }; // -------------------------- get cells -------------------------- //\n\n  /**\n   * get Flickity.Cell, given an Element\n   * @param {Element} elem - matching cell element\n   * @returns {Flickity.Cell} cell - matching cell\n   */\n\n\n  proto.getCell = function (elem) {\n    // loop through cells to get the one that matches\n    for (let cell of this.cells) {\n      if (cell.element === elem) return cell;\n    }\n  };\n  /**\n   * get collection of Flickity.Cells, given Elements\n   * @param {[Element, Array, NodeList]} elems - multiple elements\n   * @returns {Array} cells - Flickity.Cells\n   */\n\n\n  proto.getCells = function (elems) {\n    elems = utils.makeArray(elems);\n    return elems.map(elem => this.getCell(elem)).filter(Boolean);\n  };\n  /**\n   * get cell elements\n   * @returns {Array} cellElems\n   */\n\n\n  proto.getCellElements = function () {\n    return this.cells.map(cell => cell.element);\n  };\n  /**\n   * get parent cell from an element\n   * @param {Element} elem - child element\n   * @returns {Flickit.Cell} cell - parent cell\n   */\n\n\n  proto.getParentCell = function (elem) {\n    // first check if elem is cell\n    let cell = this.getCell(elem);\n    if (cell) return cell; // try to get parent cell elem\n\n    let closest = elem.closest('.flickity-slider > *');\n    return this.getCell(closest);\n  };\n  /**\n   * get cells adjacent to a slide\n   * @param {Integer} adjCount - number of adjacent slides\n   * @param {Integer} index - index of slide to start\n   * @returns {Array} cells - array of Flickity.Cells\n   */\n\n\n  proto.getAdjacentCellElements = function (adjCount, index) {\n    if (!adjCount) return this.selectedSlide.getCellElements();\n    index = index === undefined ? this.selectedIndex : index;\n    let len = this.slides.length;\n\n    if (1 + adjCount * 2 >= len) {\n      return this.getCellElements(); // get all\n    }\n\n    let cellElems = [];\n\n    for (let i = index - adjCount; i <= index + adjCount; i++) {\n      let slideIndex = this.isWrapping ? utils.modulo(i, len) : i;\n      let slide = this.slides[slideIndex];\n\n      if (slide) {\n        cellElems = cellElems.concat(slide.getCellElements());\n      }\n    }\n\n    return cellElems;\n  };\n  /**\n   * select slide from number or cell element\n   * @param {[Element, String, Number]} selector - element, selector string, or index\n   * @returns {Flickity.Cell} - matching cell\n   */\n\n\n  proto.queryCell = function (selector) {\n    if (typeof selector == 'number') {\n      // use number as index\n      return this.cells[selector];\n    } // do not select invalid selectors from hash: #123, #/. #791\n\n\n    let isSelectorString = typeof selector == 'string' && !selector.match(/^[#.]?[\\d/]/);\n\n    if (isSelectorString) {\n      // use string as selector, get element\n      selector = this.element.querySelector(selector);\n    } // get cell from element\n\n\n    return this.getCell(selector);\n  }; // -------------------------- events -------------------------- //\n\n\n  proto.uiChange = function () {\n    this.emitEvent('uiChange');\n  }; // ----- resize ----- //\n\n\n  proto.onresize = function () {\n    this.watchCSS();\n    this.resize();\n  };\n\n  utils.debounceMethod(Flickity, 'onresize', 150);\n\n  proto.resize = function () {\n    // #1177 disable resize behavior when animating or dragging for iOS 15\n    if (!this.isActive || this.isAnimating || this.isDragging) return;\n    this.getSize(); // wrap values\n\n    if (this.isWrapping) {\n      this.x = utils.modulo(this.x, this.slideableWidth);\n    }\n\n    this.positionCells();\n\n    this._updateWrapShiftCells();\n\n    this.setGallerySize();\n    this.emitEvent('resize'); // update selected index for group slides, instant\n    // TODO: position can be lost between groups of various numbers\n\n    let selectedElement = this.selectedElements && this.selectedElements[0];\n    this.selectCell(selectedElement, false, true);\n  }; // watches the :after property, activates/deactivates\n\n\n  proto.watchCSS = function () {\n    if (!this.options.watchCSS) return;\n    let afterContent = getComputedStyle(this.element, ':after').content; // activate if :after { content: 'flickity' }\n\n    if (afterContent.includes('flickity')) {\n      this.activate();\n    } else {\n      this.deactivate();\n    }\n  }; // ----- keydown ----- //\n  // go previous/next if left/right keys pressed\n\n\n  proto.onkeydown = function (event) {\n    let {\n      activeElement\n    } = document;\n    let handler = Flickity.keyboardHandlers[event.key]; // only work if element is in focus\n\n    if (!this.options.accessibility || !activeElement || !handler) return;\n    let isFocused = this.focusableElems.some(elem => activeElement === elem);\n    if (isFocused) handler.call(this);\n  };\n\n  Flickity.keyboardHandlers = {\n    ArrowLeft: function () {\n      this.uiChange();\n      let leftMethod = this.options.rightToLeft ? 'next' : 'previous';\n      this[leftMethod]();\n    },\n    ArrowRight: function () {\n      this.uiChange();\n      let rightMethod = this.options.rightToLeft ? 'previous' : 'next';\n      this[rightMethod]();\n    }\n  }; // ----- focus ----- //\n\n  proto.focus = function () {\n    this.element.focus({\n      preventScroll: true\n    });\n  }; // -------------------------- destroy -------------------------- //\n  // deactivate all Flickity functionality, but keep stuff available\n\n\n  proto.deactivate = function () {\n    if (!this.isActive) return;\n    this.element.classList.remove('flickity-enabled');\n    this.element.classList.remove('flickity-rtl');\n    this.unselectSelectedSlide(); // destroy cells\n\n    this.cells.forEach(cell => cell.destroy());\n    this.viewport.remove(); // move child elements back into element\n\n    this.element.append(...this.slider.children);\n\n    if (this.options.accessibility) {\n      this.element.removeAttribute('tabIndex');\n      this.element.removeEventListener('keydown', this);\n    } // set flags\n\n\n    this.isActive = false;\n    this.emitEvent('deactivate');\n  };\n\n  proto.destroy = function () {\n    this.deactivate();\n    window.removeEventListener('resize', this);\n    this.allOff();\n    this.emitEvent('destroy');\n\n    if (jQuery && this.$element) {\n      jQuery.removeData(this.element, 'flickity');\n    }\n\n    delete this.element.flickityGUID;\n    delete instances[this.guid];\n  }; // -------------------------- prototype -------------------------- //\n\n\n  Object.assign(proto, animatePrototype); // -------------------------- extras -------------------------- //\n\n  /**\n   * get Flickity instance from element\n   * @param {[Element, String]} elem - element or selector string\n   * @returns {Flickity} - Flickity instance\n   */\n\n  Flickity.data = function (elem) {\n    elem = utils.getQueryElement(elem);\n    if (elem) return instances[elem.flickityGUID];\n  };\n\n  utils.htmlInit(Flickity, 'flickity');\n  let {\n    jQueryBridget\n  } = window;\n\n  if (jQuery && jQueryBridget) {\n    jQueryBridget('flickity', Flickity, jQuery);\n  } // set internal jQuery, for Webpack + jQuery v3, #478\n\n\n  Flickity.setJQuery = function (jq) {\n    jQuery = jq;\n  };\n\n  Flickity.Cell = Cell;\n  Flickity.Slide = Slide;\n  return Flickity;\n});","map":{"version":3,"sources":["/Users/oti/Documents/QuiLib/node_modules/flickity/js/core.js"],"names":["window","factory","module","exports","require","_Flickity","Flickity","EvEmitter","getSize","fizzyUIUtils","Cell","Slide","animatePrototype","utils","getComputedStyle","console","jQuery","GUID","instances","element","options","queryElement","getQueryElement","error","flickityGUID","instance","option","$element","constructor","defaults","_create","accessibility","cellAlign","freeScrollFriction","friction","namespaceJQueryEvents","percentPosition","resize","selectedAttraction","setGallerySize","create","proto","prototype","Object","assign","watchCSS","rightToLeft","id","guid","selectedIndex","restingFrames","x","velocity","beginMargin","endMargin","viewport","document","createElement","className","_createSlider","focusableElems","addEventListener","eventName","on","listener","method","call","activate","opts","isActive","classList","add","cellElems","_filterFindCellElements","children","slider","append","reloadCells","tabIndex","emitEvent","selectInitialIndex","isInitActivated","dispatchEvent","elems","filterFindElements","cellSelector","cells","_makeCells","positionCells","_updateWrapShiftCells","map","cellElem","getLastCell","length","getLastSlide","slides","_sizeCells","_positionCells","index","maxCellHeight","cellX","startCell","size","outerWidth","slice","forEach","cell","_renderCellPosition","Math","max","outerHeight","slideableWidth","updateSlides","_containSlides","slidesWidth","target","sideOffset","renderX","innerWidth","width","positionValue","getPositionValue","style","transform","slide","push","canCellFit","_getCanCellFit","i","addCell","slideWidth","firstMargin","updateTarget","updateSelectedSlide","groupCells","number","parseInt","percent","percentMatch","match","groupWidth","_init","reposition","positionSliderAtSelected","setCellAlign","cursorPosition","cellAlignShorthands","left","center","right","shorthand","undefined","height","adaptiveHeight","selectedSlide","isWrapping","getIsWrapping","_unshiftCells","beforeShiftCells","afterShiftCells","beforeGapX","lastIndex","_getGapCells","afterGapX","wrapAround","gapWidth","gapX","cellIndex","increment","isContaining","contain","contentWidth","isContentSmaller","beginBound","endBound","min","type","event","args","emitArgs","concat","$event","jQEvent","Event","trigger","unidraggerEvents","_emitEvent","clickedCell","getParentCell","indexOf","isUnidraggerEvent","includes","shift","select","isWrap","isInstant","_wrapSelect","modulo","prevIndex","startAnimation","isDragSelect","wrapIndex","delta","abs","backWrapDelta","forewardWrapDelta","previous","next","unselectSelectedSlide","selectedCells","selectedElements","getCellElements","selectedCell","selectedElement","unselect","initialIndex","queryCell","selectCell","value","getCellSlideIndex","cellSlide","find","getCell","elem","getCells","makeArray","filter","Boolean","closest","getAdjacentCellElements","adjCount","len","slideIndex","selector","isSelectorString","querySelector","uiChange","onresize","debounceMethod","isAnimating","isDragging","afterContent","content","deactivate","onkeydown","activeElement","handler","keyboardHandlers","key","isFocused","some","ArrowLeft","leftMethod","ArrowRight","rightMethod","focus","preventScroll","remove","destroy","removeAttribute","removeEventListener","allOff","removeData","data","htmlInit","jQueryBridget","setJQuery","jq"],"mappings":"AAAA;;AACA;AACE,WAAUA,MAAV,EAAkBC,OAAlB,EAA4B;AAC5B;AACA,MAAK,OAAOC,MAAP,IAAiB,QAAjB,IAA6BA,MAAM,CAACC,OAAzC,EAAmD;AACjD;AACAD,IAAAA,MAAM,CAACC,OAAP,GAAiBF,OAAO,CACpBD,MADoB,EAEpBI,OAAO,CAAC,YAAD,CAFa,EAGpBA,OAAO,CAAC,UAAD,CAHa,EAIpBA,OAAO,CAAC,gBAAD,CAJa,EAKpBA,OAAO,CAAC,QAAD,CALa,EAMpBA,OAAO,CAAC,SAAD,CANa,EAOpBA,OAAO,CAAC,WAAD,CAPa,CAAxB;AASD,GAXD,MAWO;AACL;AACA,QAAIC,SAAS,GAAGL,MAAM,CAACM,QAAvB;AAEAN,IAAAA,MAAM,CAACM,QAAP,GAAkBL,OAAO,CACrBD,MADqB,EAErBA,MAAM,CAACO,SAFc,EAGrBP,MAAM,CAACQ,OAHc,EAIrBR,MAAM,CAACS,YAJc,EAKrBJ,SAAS,CAACK,IALW,EAMrBL,SAAS,CAACM,KANW,EAOrBN,SAAS,CAACO,gBAPW,CAAzB;AASD;AAEF,CA5BC,EA4BC,OAAOZ,MAAP,IAAiB,WAAjB,GAA+BA,MAA/B,GAAwC,IA5BzC,EA6BE,SAASC,OAAT,CAAkBD,MAAlB,EAA0BO,SAA1B,EAAqCC,OAArC,EAA8CK,KAA9C,EAAqDH,IAArD,EAA2DC,KAA3D,EAAkEC,gBAAlE,EAAqF;AACzF;AAEA;AACA,QAAM;AAAEE,IAAAA,gBAAF;AAAoBC,IAAAA;AAApB,MAAgCf,MAAtC;AACA,MAAI;AAAEgB,IAAAA;AAAF,MAAahB,MAAjB,CALyF,CAOzF;AAEA;;AACA,MAAIiB,IAAI,GAAG,CAAX,CAVyF,CAWzF;;AACA,MAAIC,SAAS,GAAG,EAAhB;;AAEA,WAASZ,QAAT,CAAmBa,OAAnB,EAA4BC,OAA5B,EAAsC;AACpC,QAAIC,YAAY,GAAGR,KAAK,CAACS,eAAN,CAAuBH,OAAvB,CAAnB;;AACA,QAAK,CAACE,YAAN,EAAqB;AACnB,UAAKN,OAAL,EAAeA,OAAO,CAACQ,KAAR,CAAe,6BAA4BF,YAAY,IAAIF,OAAQ,EAAnE;AACf;AACD;;AACD,SAAKA,OAAL,GAAeE,YAAf,CANoC,CAOpC;;AACA,QAAK,KAAKF,OAAL,CAAaK,YAAlB,EAAiC;AAC/B,UAAIC,QAAQ,GAAGP,SAAS,CAAE,KAAKC,OAAL,CAAaK,YAAf,CAAxB;AACA,UAAKC,QAAL,EAAgBA,QAAQ,CAACC,MAAT,CAAiBN,OAAjB;AAChB,aAAOK,QAAP;AACD,KAZmC,CAcpC;;;AACA,QAAKT,MAAL,EAAc;AACZ,WAAKW,QAAL,GAAgBX,MAAM,CAAE,KAAKG,OAAP,CAAtB;AACD,KAjBmC,CAkBpC;;;AACA,SAAKC,OAAL,GAAe,EAAE,GAAG,KAAKQ,WAAL,CAAiBC;AAAtB,KAAf;AACA,SAAKH,MAAL,CAAaN,OAAb,EApBoC,CAsBpC;;AACA,SAAKU,OAAL;AACD;;AAEDxB,EAAAA,QAAQ,CAACuB,QAAT,GAAoB;AAClBE,IAAAA,aAAa,EAAE,IADG;AAElB;AACAC,IAAAA,SAAS,EAAE,QAHO;AAIlB;AACA;AACAC,IAAAA,kBAAkB,EAAE,KANF;AAMS;AAC3BC,IAAAA,QAAQ,EAAE,IAPQ;AAOF;AAChBC,IAAAA,qBAAqB,EAAE,IARL;AASlB;AACAC,IAAAA,eAAe,EAAE,IAVC;AAWlBC,IAAAA,MAAM,EAAE,IAXU;AAYlBC,IAAAA,kBAAkB,EAAE,KAZF;AAalBC,IAAAA,cAAc,EAAE,IAbE,CAclB;AACA;;AAfkB,GAApB,CAxCyF,CA0DzF;;AACAjC,EAAAA,QAAQ,CAACkC,MAAT,GAAkB,EAAlB;AAEA,MAAIC,KAAK,GAAGnC,QAAQ,CAACoC,SAArB,CA7DyF,CA8DzF;;AACAC,EAAAA,MAAM,CAACC,MAAP,CAAeH,KAAf,EAAsBlC,SAAS,CAACmC,SAAhC;;AAEAD,EAAAA,KAAK,CAACX,OAAN,GAAgB,YAAW;AACzB,QAAI;AAAEO,MAAAA,MAAF;AAAUQ,MAAAA,QAAV;AAAoBC,MAAAA;AAApB,QAAoC,KAAK1B,OAA7C,CADyB,CAEzB;;AACA,QAAI2B,EAAE,GAAG,KAAKC,IAAL,GAAY,EAAE/B,IAAvB;AACA,SAAKE,OAAL,CAAaK,YAAb,GAA4BuB,EAA5B,CAJyB,CAIO;;AAChC7B,IAAAA,SAAS,CAAE6B,EAAF,CAAT,GAAkB,IAAlB,CALyB,CAKD;AACxB;;AACA,SAAKE,aAAL,GAAqB,CAArB,CAPyB,CAQzB;;AACA,SAAKC,aAAL,GAAqB,CAArB,CATyB,CAUzB;;AACA,SAAKC,CAAL,GAAS,CAAT;AACA,SAAKC,QAAL,GAAgB,CAAhB;AACA,SAAKC,WAAL,GAAmBP,WAAW,GAAG,aAAH,GAAmB,YAAjD;AACA,SAAKQ,SAAL,GAAiBR,WAAW,GAAG,YAAH,GAAkB,aAA9C,CAdyB,CAezB;;AACA,SAAKS,QAAL,GAAgBC,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAAhB;AACA,SAAKF,QAAL,CAAcG,SAAd,GAA0B,mBAA1B;;AACA,SAAKC,aAAL,GAlByB,CAmBzB;;;AACA,SAAKC,cAAL,GAAsB,CAAE,KAAKzC,OAAP,CAAtB;;AAEA,QAAKkB,MAAM,IAAIQ,QAAf,EAA0B;AACxB7C,MAAAA,MAAM,CAAC6D,gBAAP,CAAyB,QAAzB,EAAmC,IAAnC;AACD,KAxBwB,CA0BzB;;;AACA,SAAM,IAAIC,SAAV,IAAuB,KAAK1C,OAAL,CAAa2C,EAApC,EAAyC;AACvC,UAAIC,QAAQ,GAAG,KAAK5C,OAAL,CAAa2C,EAAb,CAAiBD,SAAjB,CAAf;AACA,WAAKC,EAAL,CAASD,SAAT,EAAoBE,QAApB;AACD;;AAED,SAAM,IAAIC,MAAV,IAAoB3D,QAAQ,CAACkC,MAA7B,EAAsC;AACpClC,MAAAA,QAAQ,CAACkC,MAAT,CAAiByB,MAAjB,EAA0BC,IAA1B,CAAgC,IAAhC;AACD;;AAED,QAAKrB,QAAL,EAAgB;AACd,WAAKA,QAAL;AACD,KAFD,MAEO;AACL,WAAKsB,QAAL;AACD;AACF,GAzCD;AA2CA;AACA;AACA;AACA;;;AACA1B,EAAAA,KAAK,CAACf,MAAN,GAAe,UAAU0C,IAAV,EAAiB;AAC9BzB,IAAAA,MAAM,CAACC,MAAP,CAAe,KAAKxB,OAApB,EAA6BgD,IAA7B;AACD,GAFD;;AAIA3B,EAAAA,KAAK,CAAC0B,QAAN,GAAiB,YAAW;AAC1B,QAAK,KAAKE,QAAV,EAAqB;AAErB,SAAKA,QAAL,GAAgB,IAAhB;AACA,SAAKlD,OAAL,CAAamD,SAAb,CAAuBC,GAAvB,CAA2B,kBAA3B;;AACA,QAAK,KAAKnD,OAAL,CAAa0B,WAAlB,EAAgC;AAC9B,WAAK3B,OAAL,CAAamD,SAAb,CAAuBC,GAAvB,CAA2B,cAA3B;AACD;;AAED,SAAK/D,OAAL,GAT0B,CAU1B;;AACA,QAAIgE,SAAS,GAAG,KAAKC,uBAAL,CAA8B,KAAKtD,OAAL,CAAauD,QAA3C,CAAhB;;AACA,SAAKC,MAAL,CAAYC,MAAZ,CAAoB,GAAGJ,SAAvB;AACA,SAAKjB,QAAL,CAAcqB,MAAd,CAAsB,KAAKD,MAA3B;AACA,SAAKxD,OAAL,CAAayD,MAAb,CAAqB,KAAKrB,QAA1B,EAd0B,CAe1B;;AACA,SAAKsB,WAAL;;AAEA,QAAK,KAAKzD,OAAL,CAAaW,aAAlB,EAAkC;AAChC;AACA,WAAKZ,OAAL,CAAa2D,QAAb,GAAwB,CAAxB,CAFgC,CAGhC;;AACA,WAAK3D,OAAL,CAAa0C,gBAAb,CAA+B,SAA/B,EAA0C,IAA1C;AACD;;AAED,SAAKkB,SAAL,CAAe,UAAf;AACA,SAAKC,kBAAL,GA1B0B,CA2B1B;;AACA,SAAKC,eAAL,GAAuB,IAAvB,CA5B0B,CA6B1B;;AACA,SAAKC,aAAL,CAAmB,OAAnB;AACD,GA/BD,CApHyF,CAqJzF;;;AACAzC,EAAAA,KAAK,CAACkB,aAAN,GAAsB,YAAW;AAC/B;AACA,QAAIgB,MAAM,GAAGnB,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAAb;AACAkB,IAAAA,MAAM,CAACjB,SAAP,GAAmB,iBAAnB;AACA,SAAKiB,MAAL,GAAcA,MAAd;AACD,GALD;;AAOAlC,EAAAA,KAAK,CAACgC,uBAAN,GAAgC,UAAUU,KAAV,EAAkB;AAChD,WAAOtE,KAAK,CAACuE,kBAAN,CAA0BD,KAA1B,EAAiC,KAAK/D,OAAL,CAAaiE,YAA9C,CAAP;AACD,GAFD,CA7JyF,CAiKzF;;;AACA5C,EAAAA,KAAK,CAACoC,WAAN,GAAoB,YAAW;AAC7B;AACA,SAAKS,KAAL,GAAa,KAAKC,UAAL,CAAiB,KAAKZ,MAAL,CAAYD,QAA7B,CAAb;AACA,SAAKc,aAAL;;AACA,SAAKC,qBAAL;;AACA,SAAKlD,cAAL;AACD,GAND;AAQA;AACA;AACA;AACA;AACA;;;AACAE,EAAAA,KAAK,CAAC8C,UAAN,GAAmB,UAAUJ,KAAV,EAAkB;AACnC,QAAIX,SAAS,GAAG,KAAKC,uBAAL,CAA8BU,KAA9B,CAAhB,CADmC,CAGnC;;;AACA,WAAOX,SAAS,CAACkB,GAAV,CAAiBC,QAAF,IAAgB,IAAIjF,IAAJ,CAAUiF,QAAV,CAA/B,CAAP;AACD,GALD;;AAOAlD,EAAAA,KAAK,CAACmD,WAAN,GAAoB,YAAW;AAC7B,WAAO,KAAKN,KAAL,CAAY,KAAKA,KAAL,CAAWO,MAAX,GAAoB,CAAhC,CAAP;AACD,GAFD;;AAIApD,EAAAA,KAAK,CAACqD,YAAN,GAAqB,YAAW;AAC9B,WAAO,KAAKC,MAAL,CAAa,KAAKA,MAAL,CAAYF,MAAZ,GAAqB,CAAlC,CAAP;AACD,GAFD,CA1LyF,CA8LzF;;;AACApD,EAAAA,KAAK,CAAC+C,aAAN,GAAsB,YAAW;AAC/B;AACA,SAAKQ,UAAL,CAAiB,KAAKV,KAAtB,EAF+B,CAG/B;;;AACA,SAAKW,cAAL,CAAqB,CAArB;AACD,GALD;AAOA;AACA;AACA;AACA;;;AACAxD,EAAAA,KAAK,CAACwD,cAAN,GAAuB,UAAUC,KAAV,EAAkB;AACvCA,IAAAA,KAAK,GAAGA,KAAK,IAAI,CAAjB,CADuC,CAEvC;AACA;;AACA,SAAKC,aAAL,GAAqBD,KAAK,GAAG,KAAKC,aAAL,IAAsB,CAAzB,GAA6B,CAAvD;AACA,QAAIC,KAAK,GAAG,CAAZ,CALuC,CAMvC;;AACA,QAAKF,KAAK,GAAG,CAAb,EAAiB;AACf,UAAIG,SAAS,GAAG,KAAKf,KAAL,CAAYY,KAAK,GAAG,CAApB,CAAhB;AACAE,MAAAA,KAAK,GAAGC,SAAS,CAAClD,CAAV,GAAckD,SAAS,CAACC,IAAV,CAAeC,UAArC;AACD;;AAED,SAAKjB,KAAL,CAAWkB,KAAX,CAAkBN,KAAlB,EAA0BO,OAA1B,CAAqCC,IAAF,IAAY;AAC7CA,MAAAA,IAAI,CAACvD,CAAL,GAASiD,KAAT;;AACA,WAAKO,mBAAL,CAA0BD,IAA1B,EAAgCN,KAAhC;;AACAA,MAAAA,KAAK,IAAIM,IAAI,CAACJ,IAAL,CAAUC,UAAnB;AACA,WAAKJ,aAAL,GAAqBS,IAAI,CAACC,GAAL,CAAUH,IAAI,CAACJ,IAAL,CAAUQ,WAApB,EAAiC,KAAKX,aAAtC,CAArB;AACD,KALD,EAZuC,CAkBvC;;AACA,SAAKY,cAAL,GAAsBX,KAAtB,CAnBuC,CAoBvC;;AACA,SAAKY,YAAL,GArBuC,CAsBvC;;AACA,SAAKC,cAAL,GAvBuC,CAwBvC;;;AACA,SAAKC,WAAL,GAAmB,KAAK5B,KAAL,CAAWO,MAAX,GACjB,KAAKC,YAAL,GAAoBqB,MAApB,GAA6B,KAAKpB,MAAL,CAAY,CAAZ,EAAeoB,MAD3B,GACoC,CADvD;AAED,GA3BD;;AA6BA1E,EAAAA,KAAK,CAACkE,mBAAN,GAA4B,UAAUD,IAAV,EAAgBvD,CAAhB,EAAoB;AAC9C;AACA,QAAIiE,UAAU,GAAG,KAAKhG,OAAL,CAAa0B,WAAb,GAA2B,CAAC,CAA5B,GAAgC,CAAjD;AACA,QAAIuE,OAAO,GAAGlE,CAAC,GAAGiE,UAAlB;AACA,QAAK,KAAKhG,OAAL,CAAagB,eAAlB,EAAoCiF,OAAO,IAAI,KAAKf,IAAL,CAAUgB,UAAV,GAAuBZ,IAAI,CAACJ,IAAL,CAAUiB,KAA5C;AACpC,QAAIC,aAAa,GAAG,KAAKC,gBAAL,CAAuBJ,OAAvB,CAApB;AACAX,IAAAA,IAAI,CAACvF,OAAL,CAAauG,KAAb,CAAmBC,SAAnB,GAAgC,eAAcH,aAAc,IAA5D;AACD,GAPD;AASA;AACA;AACA;AACA;;;AACA/E,EAAAA,KAAK,CAACuD,UAAN,GAAmB,UAAUV,KAAV,EAAkB;AACnCA,IAAAA,KAAK,CAACmB,OAAN,CAAiBC,IAAF,IAAYA,IAAI,CAAClG,OAAL,EAA3B;AACD,GAFD,CApPyF,CAwPzF;;;AAEAiC,EAAAA,KAAK,CAACuE,YAAN,GAAqB,YAAW;AAC9B,SAAKjB,MAAL,GAAc,EAAd;AACA,QAAK,CAAC,KAAKT,KAAL,CAAWO,MAAjB,EAA0B;AAE1B,QAAI;AAAExC,MAAAA,WAAF;AAAeC,MAAAA;AAAf,QAA6B,IAAjC;AACA,QAAIsE,KAAK,GAAG,IAAIjH,KAAJ,CAAW0C,WAAX,EAAwBC,SAAxB,EAAmC,KAAKtB,SAAxC,CAAZ;AACA,SAAK+D,MAAL,CAAY8B,IAAZ,CAAkBD,KAAlB;;AAEA,QAAIE,UAAU,GAAG,KAAKC,cAAL,EAAjB;;AAEA,SAAKzC,KAAL,CAAWmB,OAAX,CAAoB,CAAEC,IAAF,EAAQsB,CAAR,KAAe;AACjC;AACA,UAAK,CAACJ,KAAK,CAACtC,KAAN,CAAYO,MAAlB,EAA2B;AACzB+B,QAAAA,KAAK,CAACK,OAAN,CAAevB,IAAf;AACA;AACD;;AAED,UAAIwB,UAAU,GAAKN,KAAK,CAACrB,UAAN,GAAmBqB,KAAK,CAACO,WAA3B,IACbzB,IAAI,CAACJ,IAAL,CAAUC,UAAV,GAAuBG,IAAI,CAACJ,IAAL,CAAWhD,SAAX,CADV,CAAjB;;AAGA,UAAKwE,UAAU,CAAEE,CAAF,EAAKE,UAAL,CAAf,EAAmC;AACjCN,QAAAA,KAAK,CAACK,OAAN,CAAevB,IAAf;AACD,OAFD,MAEO;AACL;AACAkB,QAAAA,KAAK,CAACQ,YAAN;AAEAR,QAAAA,KAAK,GAAG,IAAIjH,KAAJ,CAAW0C,WAAX,EAAwBC,SAAxB,EAAmC,KAAKtB,SAAxC,CAAR;AACA,aAAK+D,MAAL,CAAY8B,IAAZ,CAAkBD,KAAlB;AACAA,QAAAA,KAAK,CAACK,OAAN,CAAevB,IAAf;AACD;AACF,KApBD,EAV8B,CA+B9B;;AACAkB,IAAAA,KAAK,CAACQ,YAAN,GAhC8B,CAiC9B;;AACA,SAAKC,mBAAL;AACD,GAnCD;;AAqCA5F,EAAAA,KAAK,CAACsF,cAAN,GAAuB,YAAW;AAChC,QAAI;AAAEO,MAAAA;AAAF,QAAiB,KAAKlH,OAA1B;AACA,QAAK,CAACkH,UAAN,EAAmB,OAAO,MAAM,KAAb;;AAEnB,QAAK,OAAOA,UAAP,IAAqB,QAA1B,EAAqC;AACnC;AACA,UAAIC,MAAM,GAAGC,QAAQ,CAAEF,UAAF,EAAc,EAAd,CAArB;AACA,aAASN,CAAF,IAAWA,CAAC,GAAGO,MAAN,KAAmB,CAAnC;AACD,KAR+B,CAShC;;;AACA,QAAIE,OAAO,GAAG,CAAd,CAVgC,CAWhC;;AACA,QAAIC,YAAY,GAAG,OAAOJ,UAAP,IAAqB,QAArB,IAAiCA,UAAU,CAACK,KAAX,CAAkB,UAAlB,CAApD;AACA,QAAKD,YAAL,EAAoBD,OAAO,GAAGD,QAAQ,CAAEE,YAAY,CAAC,CAAD,CAAd,EAAmB,EAAnB,CAAR,GAAkC,GAA5C;AACpB,QAAIE,UAAU,GAAG,CAAE,KAAKtC,IAAL,CAAUgB,UAAV,GAAuB,CAAzB,IAA+BmB,OAAhD;AACA,WAAO,CAAET,CAAF,EAAKE,UAAL,KAAqBA,UAAU,IAAIU,UAA1C;AACD,GAhBD,CA/RyF,CAiTzF;;;AACAnG,EAAAA,KAAK,CAACoG,KAAN,GACApG,KAAK,CAACqG,UAAN,GAAmB,YAAW;AAC5B,SAAKtD,aAAL;AACA,SAAKuD,wBAAL;AACD,GAJD;;AAMAtG,EAAAA,KAAK,CAACjC,OAAN,GAAgB,YAAW;AACzB,SAAK8F,IAAL,GAAY9F,OAAO,CAAE,KAAKW,OAAP,CAAnB;AACA,SAAK6H,YAAL;AACA,SAAKC,cAAL,GAAsB,KAAK3C,IAAL,CAAUgB,UAAV,GAAuB,KAAKtF,SAAlD;AACD,GAJD;;AAMA,MAAIkH,mBAAmB,GAAG;AACxBC,IAAAA,IAAI,EAAE,CADkB;AAExBC,IAAAA,MAAM,EAAE,GAFgB;AAGxBC,IAAAA,KAAK,EAAE;AAHiB,GAA1B;;AAMA5G,EAAAA,KAAK,CAACuG,YAAN,GAAqB,YAAW;AAC9B,QAAI;AAAEhH,MAAAA,SAAF;AAAac,MAAAA;AAAb,QAA6B,KAAK1B,OAAtC;AACA,QAAIkI,SAAS,GAAGJ,mBAAmB,CAAElH,SAAF,CAAnC;AACA,SAAKA,SAAL,GAAiBsH,SAAS,KAAKC,SAAd,GAA0BD,SAA1B,GAAsCtH,SAAvD;AACA,QAAKc,WAAL,EAAmB,KAAKd,SAAL,GAAiB,IAAI,KAAKA,SAA1B;AACpB,GALD;;AAOAS,EAAAA,KAAK,CAACF,cAAN,GAAuB,YAAW;AAChC,QAAK,CAAC,KAAKnB,OAAL,CAAamB,cAAnB,EAAoC;AAEpC,QAAIiH,MAAM,GAAG,KAAKpI,OAAL,CAAaqI,cAAb,IAA+B,KAAKC,aAApC,GACX,KAAKA,aAAL,CAAmBF,MADR,GACiB,KAAKrD,aADnC;AAEA,SAAK5C,QAAL,CAAcmE,KAAd,CAAoB8B,MAApB,GAA8B,GAAEA,MAAO,IAAvC;AACD,GAND;;AAQA/G,EAAAA,KAAK,CAACgD,qBAAN,GAA8B,YAAW;AACvC;AACA,SAAKkE,UAAL,GAAkB,KAAKC,aAAL,EAAlB,CAFuC,CAGvC;;AACA,QAAK,CAAC,KAAKD,UAAX,EAAwB,OAJe,CAMvC;;AACA,SAAKE,aAAL,CAAoB,KAAKC,gBAAzB;;AACA,SAAKD,aAAL,CAAoB,KAAKE,eAAzB,EARuC,CASvC;AACA;;;AACA,QAAIC,UAAU,GAAG,KAAKf,cAAtB;AACA,QAAIgB,SAAS,GAAG,KAAK3E,KAAL,CAAWO,MAAX,GAAoB,CAApC;AACA,SAAKiE,gBAAL,GAAwB,KAAKI,YAAL,CAAmBF,UAAnB,EAA+BC,SAA/B,EAA0C,CAAC,CAA3C,CAAxB,CAbuC,CAcvC;AACA;;AACA,QAAIE,SAAS,GAAG,KAAK7D,IAAL,CAAUgB,UAAV,GAAuB,KAAK2B,cAA5C,CAhBuC,CAiBvC;;AACA,SAAKc,eAAL,GAAuB,KAAKG,YAAL,CAAmBC,SAAnB,EAA8B,CAA9B,EAAiC,CAAjC,CAAvB;AACD,GAnBD;;AAqBA1H,EAAAA,KAAK,CAACmH,aAAN,GAAsB,YAAW;AAC/B,QAAI;AAAEQ,MAAAA;AAAF,QAAiB,KAAKhJ,OAA1B;AACA,QAAK,CAACgJ,UAAD,IAAe,KAAKrE,MAAL,CAAYF,MAAZ,GAAqB,CAAzC,EAA6C,OAAO,KAAP;AAE7C,QAAKuE,UAAU,KAAK,MAApB,EAA6B,OAAO,IAAP,CAJE,CAK/B;;AAEA,QAAIC,QAAQ,GAAG,KAAKtD,cAAL,GAAsB,KAAKT,IAAL,CAAUgB,UAA/C;AACA,QAAK+C,QAAQ,GAAG,KAAK/D,IAAL,CAAUgB,UAA1B,EAAuC,OAAO,IAAP,CARR,CAQqB;AACpD;;AACA,SAAM,IAAIZ,IAAV,IAAkB,KAAKpB,KAAvB,EAA+B;AAC7B,UAAKoB,IAAI,CAACJ,IAAL,CAAUC,UAAV,GAAuB8D,QAA5B,EAAuC,OAAO,KAAP;AACxC;;AACD,WAAO,IAAP;AACD,GAdD;;AAgBA5H,EAAAA,KAAK,CAACyH,YAAN,GAAqB,UAAUI,IAAV,EAAgBC,SAAhB,EAA2BC,SAA3B,EAAuC;AAC1D;AACA,QAAIlF,KAAK,GAAG,EAAZ;;AACA,WAAQgF,IAAI,GAAG,CAAf,EAAmB;AACjB,UAAI5D,IAAI,GAAG,KAAKpB,KAAL,CAAYiF,SAAZ,CAAX;AACA,UAAK,CAAC7D,IAAN,EAAa;AAEbpB,MAAAA,KAAK,CAACuC,IAAN,CAAYnB,IAAZ;AACA6D,MAAAA,SAAS,IAAIC,SAAb;AACAF,MAAAA,IAAI,IAAI5D,IAAI,CAACJ,IAAL,CAAUC,UAAlB;AACD;;AACD,WAAOjB,KAAP;AACD,GAZD,CAxXyF,CAsYzF;AAEA;;;AACA7C,EAAAA,KAAK,CAACwE,cAAN,GAAuB,YAAW;AAChC,QAAIwD,YAAY,GAAG,KAAKrJ,OAAL,CAAasJ,OAAb,IAAwB,CAAC,KAAKf,UAA9B,IACf,KAAKrE,KAAL,CAAWO,MADf;AAEA,QAAK,CAAC4E,YAAN,EAAqB;AAErB,QAAIE,YAAY,GAAG,KAAK5D,cAAL,GAAsB,KAAKnB,WAAL,GAAmBU,IAAnB,CAAyB,KAAKhD,SAA9B,CAAzC,CALgC,CAMhC;;AACA,QAAIsH,gBAAgB,GAAGD,YAAY,GAAG,KAAKrE,IAAL,CAAUgB,UAAhD;;AACA,QAAKsD,gBAAL,EAAwB;AACtB;AACA,WAAK7E,MAAL,CAAYU,OAAZ,CAAuBmB,KAAF,IAAa;AAChCA,QAAAA,KAAK,CAACT,MAAN,GAAewD,YAAY,GAAG,KAAK3I,SAAnC;AACD,OAFD;AAGD,KALD,MAKO;AACL;AACA,UAAI6I,UAAU,GAAG,KAAK5B,cAAL,GAAsB,KAAK3D,KAAL,CAAW,CAAX,EAAcgB,IAAd,CAAoB,KAAKjD,WAAzB,CAAvC;AACA,UAAIyH,QAAQ,GAAGH,YAAY,GAAG,KAAKrE,IAAL,CAAUgB,UAAV,IAAyB,IAAI,KAAKtF,SAAlC,CAA9B;AACA,WAAK+D,MAAL,CAAYU,OAAZ,CAAuBmB,KAAF,IAAa;AAChCA,QAAAA,KAAK,CAACT,MAAN,GAAeP,IAAI,CAACC,GAAL,CAAUe,KAAK,CAACT,MAAhB,EAAwB0D,UAAxB,CAAf;AACAjD,QAAAA,KAAK,CAACT,MAAN,GAAeP,IAAI,CAACmE,GAAL,CAAUnD,KAAK,CAACT,MAAhB,EAAwB2D,QAAxB,CAAf;AACD,OAHD;AAID;AACF,GAtBD,CAzYyF,CAiazF;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACArI,EAAAA,KAAK,CAACyC,aAAN,GAAsB,UAAU8F,IAAV,EAAgBC,KAAhB,EAAuBC,IAAvB,EAA8B;AAClD,QAAIC,QAAQ,GAAGF,KAAK,GAAG,CAAEA,KAAF,EAAUG,MAAV,CAAkBF,IAAlB,CAAH,GAA8BA,IAAlD;AACA,SAAKnG,SAAL,CAAgBiG,IAAhB,EAAsBG,QAAtB;;AAEA,QAAKnK,MAAM,IAAI,KAAKW,QAApB,EAA+B;AAC7B;AACAqJ,MAAAA,IAAI,IAAI,KAAK5J,OAAL,CAAae,qBAAb,GAAqC,WAArC,GAAmD,EAA3D;AACA,UAAIkJ,MAAM,GAAGL,IAAb;;AACA,UAAKC,KAAL,EAAa;AACX;AACA,YAAIK,OAAO,GAAG,IAAItK,MAAM,CAACuK,KAAX,CAAkBN,KAAlB,CAAd;AACAK,QAAAA,OAAO,CAACN,IAAR,GAAeA,IAAf;AACAK,QAAAA,MAAM,GAAGC,OAAT;AACD;;AACD,WAAK3J,QAAL,CAAc6J,OAAd,CAAuBH,MAAvB,EAA+BH,IAA/B;AACD;AACF,GAhBD;;AAkBA,QAAMO,gBAAgB,GAAG,CACvB,WADuB,EAEvB,UAFuB,EAGvB,SAHuB,EAIvB,aAJuB,EAKvB,aALuB,EAMvB,YANuB,EAOvB,aAPuB,CAAzB;AAUA,MAAIC,UAAU,GAAGjJ,KAAK,CAACsC,SAAvB;;AACAtC,EAAAA,KAAK,CAACsC,SAAN,GAAkB,UAAUjB,SAAV,EAAqBoH,IAArB,EAA4B;AAC5C,QAAKpH,SAAS,KAAK,aAAnB,EAAmC;AACjC;AACA,UAAI6H,WAAW,GAAG,KAAKC,aAAL,CAAoBV,IAAI,CAAC,CAAD,CAAJ,CAAQ/D,MAA5B,CAAlB;AACA,UAAIxB,QAAQ,GAAGgG,WAAW,IAAIA,WAAW,CAACxK,OAA1C;AACA,UAAIoJ,SAAS,GAAGoB,WAAW,IAAI,KAAKrG,KAAL,CAAWuG,OAAX,CAAoBF,WAApB,CAA/B;AACAT,MAAAA,IAAI,GAAGA,IAAI,CAACE,MAAL,CAAazF,QAAb,EAAuB4E,SAAvB,CAAP;AACD,KAP2C,CAQ5C;;;AACAmB,IAAAA,UAAU,CAACxH,IAAX,CAAiB,IAAjB,EAAuBJ,SAAvB,EAAkCoH,IAAlC,EAT4C,CAU5C;;;AACA,QAAIY,iBAAiB,GAAGL,gBAAgB,CAACM,QAAjB,CAA2BjI,SAA3B,CAAxB;AACA,QAAK,CAACgI,iBAAD,IAAsB,CAAC9K,MAAvB,IAAiC,CAAC,KAAKW,QAA5C,EAAuD;AAEvDmC,IAAAA,SAAS,IAAI,KAAK1C,OAAL,CAAae,qBAAb,GAAqC,WAArC,GAAmD,EAAhE;AACA,QAAI8I,KAAK,GAAGC,IAAI,CAACc,KAAL,CAAY,CAAZ,CAAZ;AACA,QAAIV,OAAO,GAAG,IAAItK,MAAM,CAACuK,KAAX,CAAkBN,KAAlB,CAAd;AACAK,IAAAA,OAAO,CAACN,IAAR,GAAelH,SAAf;AACA,SAAKnC,QAAL,CAAc6J,OAAd,CAAuBF,OAAvB,EAAgCJ,IAAhC;AACD,GAnBD,CAtcyF,CA2dzF;;AAEA;AACA;AACA;AACA;AACA;;;AACAzI,EAAAA,KAAK,CAACwJ,MAAN,GAAe,UAAU/F,KAAV,EAAiBgG,MAAjB,EAAyBC,SAAzB,EAAqC;AAClD,QAAK,CAAC,KAAK9H,QAAX,EAAsB;AAEtB6B,IAAAA,KAAK,GAAGsC,QAAQ,CAAEtC,KAAF,EAAS,EAAT,CAAhB;;AACA,SAAKkG,WAAL,CAAkBlG,KAAlB;;AAEA,QAAK,KAAKyD,UAAL,IAAmBuC,MAAxB,EAAiC;AAC/BhG,MAAAA,KAAK,GAAGrF,KAAK,CAACwL,MAAN,CAAcnG,KAAd,EAAqB,KAAKH,MAAL,CAAYF,MAAjC,CAAR;AACD,KARiD,CASlD;;;AACA,QAAK,CAAC,KAAKE,MAAL,CAAaG,KAAb,CAAN,EAA6B;AAE7B,QAAIoG,SAAS,GAAG,KAAKrJ,aAArB;AACA,SAAKA,aAAL,GAAqBiD,KAArB;AACA,SAAKmC,mBAAL;;AACA,QAAK8D,SAAL,EAAiB;AACf,WAAKpD,wBAAL;AACD,KAFD,MAEO;AACL,WAAKwD,cAAL;AACD;;AACD,QAAK,KAAKnL,OAAL,CAAaqI,cAAlB,EAAmC;AACjC,WAAKlH,cAAL;AACD,KAtBiD,CAuBlD;;;AACA,SAAK2C,aAAL,CAAoB,QAApB,EAA8B,IAA9B,EAAoC,CAAEgB,KAAF,CAApC,EAxBkD,CAyBlD;;AACA,QAAKA,KAAK,KAAKoG,SAAf,EAA2B;AACzB,WAAKpH,aAAL,CAAoB,QAApB,EAA8B,IAA9B,EAAoC,CAAEgB,KAAF,CAApC;AACD;AACF,GA7BD,CAleyF,CAigBzF;;;AACAzD,EAAAA,KAAK,CAAC2J,WAAN,GAAoB,UAAUlG,KAAV,EAAkB;AACpC,QAAK,CAAC,KAAKyD,UAAX,EAAwB;AAExB,UAAM;AAAE1G,MAAAA,aAAF;AAAiB8D,MAAAA,cAAjB;AAAiChB,MAAAA,MAAM,EAAE;AAAEF,QAAAA;AAAF;AAAzC,QAAwD,IAA9D,CAHoC,CAIpC;;AACA,QAAK,CAAC,KAAK2G,YAAX,EAA0B;AACxB,UAAIC,SAAS,GAAG5L,KAAK,CAACwL,MAAN,CAAcnG,KAAd,EAAqBL,MAArB,CAAhB,CADwB,CAExB;;AACA,UAAI6G,KAAK,GAAG9F,IAAI,CAAC+F,GAAL,CAAUF,SAAS,GAAGxJ,aAAtB,CAAZ;AACA,UAAI2J,aAAa,GAAGhG,IAAI,CAAC+F,GAAL,CAAYF,SAAS,GAAG5G,MAAd,GAAyB5C,aAAnC,CAApB;AACA,UAAI4J,iBAAiB,GAAGjG,IAAI,CAAC+F,GAAL,CAAYF,SAAS,GAAG5G,MAAd,GAAyB5C,aAAnC,CAAxB;;AACA,UAAK2J,aAAa,GAAGF,KAArB,EAA6B;AAC3BxG,QAAAA,KAAK,IAAIL,MAAT;AACD,OAFD,MAEO,IAAKgH,iBAAiB,GAAGH,KAAzB,EAAiC;AACtCxG,QAAAA,KAAK,IAAIL,MAAT;AACD;AACF,KAhBmC,CAkBpC;;;AACA,QAAKK,KAAK,GAAG,CAAb,EAAiB;AACf,WAAK/C,CAAL,IAAU4D,cAAV;AACD,KAFD,MAEO,IAAKb,KAAK,IAAIL,MAAd,EAAuB;AAC5B,WAAK1C,CAAL,IAAU4D,cAAV;AACD;AACF,GAxBD;;AA0BAtE,EAAAA,KAAK,CAACqK,QAAN,GAAiB,UAAUZ,MAAV,EAAkBC,SAAlB,EAA8B;AAC7C,SAAKF,MAAL,CAAa,KAAKhJ,aAAL,GAAqB,CAAlC,EAAqCiJ,MAArC,EAA6CC,SAA7C;AACD,GAFD;;AAIA1J,EAAAA,KAAK,CAACsK,IAAN,GAAa,UAAUb,MAAV,EAAkBC,SAAlB,EAA8B;AACzC,SAAKF,MAAL,CAAa,KAAKhJ,aAAL,GAAqB,CAAlC,EAAqCiJ,MAArC,EAA6CC,SAA7C;AACD,GAFD;;AAIA1J,EAAAA,KAAK,CAAC4F,mBAAN,GAA4B,YAAW;AACrC,QAAIT,KAAK,GAAG,KAAK7B,MAAL,CAAa,KAAK9C,aAAlB,CAAZ,CADqC,CAErC;;AACA,QAAK,CAAC2E,KAAN,EAAc,OAHuB,CAKrC;;AACA,SAAKoF,qBAAL,GANqC,CAOrC;;AACA,SAAKtD,aAAL,GAAqB9B,KAArB;AACAA,IAAAA,KAAK,CAACqE,MAAN;AACA,SAAKgB,aAAL,GAAqBrF,KAAK,CAACtC,KAA3B;AACA,SAAK4H,gBAAL,GAAwBtF,KAAK,CAACuF,eAAN,EAAxB,CAXqC,CAYrC;;AACA,SAAKC,YAAL,GAAoBxF,KAAK,CAACtC,KAAN,CAAY,CAAZ,CAApB;AACA,SAAK+H,eAAL,GAAuB,KAAKH,gBAAL,CAAsB,CAAtB,CAAvB;AACD,GAfD;;AAiBAzK,EAAAA,KAAK,CAACuK,qBAAN,GAA8B,YAAW;AACvC,QAAK,KAAKtD,aAAV,EAA0B,KAAKA,aAAL,CAAmB4D,QAAnB;AAC3B,GAFD;;AAIA7K,EAAAA,KAAK,CAACuC,kBAAN,GAA2B,YAAW;AACpC,QAAIuI,YAAY,GAAG,KAAKnM,OAAL,CAAamM,YAAhC,CADoC,CAEpC;;AACA,QAAK,KAAKtI,eAAV,EAA4B;AAC1B,WAAKgH,MAAL,CAAa,KAAKhJ,aAAlB,EAAiC,KAAjC,EAAwC,IAAxC;AACA;AACD,KANmC,CAOpC;;;AACA,QAAKsK,YAAY,IAAI,OAAOA,YAAP,IAAuB,QAA5C,EAAuD;AACrD,UAAI7G,IAAI,GAAG,KAAK8G,SAAL,CAAgBD,YAAhB,CAAX;;AACA,UAAK7G,IAAL,EAAY;AACV,aAAK+G,UAAL,CAAiBF,YAAjB,EAA+B,KAA/B,EAAsC,IAAtC;AACA;AACD;AACF;;AAED,QAAIrH,KAAK,GAAG,CAAZ,CAhBoC,CAiBpC;;AACA,QAAKqH,YAAY,IAAI,KAAKxH,MAAL,CAAawH,YAAb,CAArB,EAAmD;AACjDrH,MAAAA,KAAK,GAAGqH,YAAR;AACD,KApBmC,CAqBpC;;;AACA,SAAKtB,MAAL,CAAa/F,KAAb,EAAoB,KAApB,EAA2B,IAA3B;AACD,GAvBD;AAyBA;AACA;AACA;AACA;AACA;AACA;;;AACAzD,EAAAA,KAAK,CAACgL,UAAN,GAAmB,UAAUC,KAAV,EAAiBxB,MAAjB,EAAyBC,SAAzB,EAAqC;AACtD;AACA,QAAIzF,IAAI,GAAG,KAAK8G,SAAL,CAAgBE,KAAhB,CAAX;AACA,QAAK,CAAChH,IAAN,EAAa;AAEb,QAAIR,KAAK,GAAG,KAAKyH,iBAAL,CAAwBjH,IAAxB,CAAZ;AACA,SAAKuF,MAAL,CAAa/F,KAAb,EAAoBgG,MAApB,EAA4BC,SAA5B;AACD,GAPD;;AASA1J,EAAAA,KAAK,CAACkL,iBAAN,GAA0B,UAAUjH,IAAV,EAAiB;AACzC;AACA,QAAIkH,SAAS,GAAG,KAAK7H,MAAL,CAAY8H,IAAZ,CAAoBjG,KAAF,IAAaA,KAAK,CAACtC,KAAN,CAAYyG,QAAZ,CAAsBrF,IAAtB,CAA/B,CAAhB;AACA,WAAO,KAAKX,MAAL,CAAY8F,OAAZ,CAAqB+B,SAArB,CAAP;AACD,GAJD,CAjmByF,CAumBzF;;AAEA;AACA;AACA;AACA;AACA;;;AACAnL,EAAAA,KAAK,CAACqL,OAAN,GAAgB,UAAUC,IAAV,EAAiB;AAC/B;AACA,SAAM,IAAIrH,IAAV,IAAkB,KAAKpB,KAAvB,EAA+B;AAC7B,UAAKoB,IAAI,CAACvF,OAAL,KAAiB4M,IAAtB,EAA6B,OAAOrH,IAAP;AAC9B;AACF,GALD;AAOA;AACA;AACA;AACA;AACA;;;AACAjE,EAAAA,KAAK,CAACuL,QAAN,GAAiB,UAAU7I,KAAV,EAAkB;AACjCA,IAAAA,KAAK,GAAGtE,KAAK,CAACoN,SAAN,CAAiB9I,KAAjB,CAAR;AACA,WAAOA,KAAK,CAACO,GAAN,CAAaqI,IAAF,IAAY,KAAKD,OAAL,CAAcC,IAAd,CAAvB,EAA8CG,MAA9C,CAAsDC,OAAtD,CAAP;AACD,GAHD;AAKA;AACA;AACA;AACA;;;AACA1L,EAAAA,KAAK,CAAC0K,eAAN,GAAwB,YAAW;AACjC,WAAO,KAAK7H,KAAL,CAAWI,GAAX,CAAkBgB,IAAF,IAAYA,IAAI,CAACvF,OAAjC,CAAP;AACD,GAFD;AAIA;AACA;AACA;AACA;AACA;;;AACAsB,EAAAA,KAAK,CAACmJ,aAAN,GAAsB,UAAUmC,IAAV,EAAiB;AACrC;AACA,QAAIrH,IAAI,GAAG,KAAKoH,OAAL,CAAcC,IAAd,CAAX;AACA,QAAKrH,IAAL,EAAY,OAAOA,IAAP,CAHyB,CAKrC;;AACA,QAAI0H,OAAO,GAAGL,IAAI,CAACK,OAAL,CAAa,sBAAb,CAAd;AACA,WAAO,KAAKN,OAAL,CAAcM,OAAd,CAAP;AACD,GARD;AAUA;AACA;AACA;AACA;AACA;AACA;;;AACA3L,EAAAA,KAAK,CAAC4L,uBAAN,GAAgC,UAAUC,QAAV,EAAoBpI,KAApB,EAA4B;AAC1D,QAAK,CAACoI,QAAN,EAAiB,OAAO,KAAK5E,aAAL,CAAmByD,eAAnB,EAAP;AAEjBjH,IAAAA,KAAK,GAAGA,KAAK,KAAKqD,SAAV,GAAsB,KAAKtG,aAA3B,GAA2CiD,KAAnD;AAEA,QAAIqI,GAAG,GAAG,KAAKxI,MAAL,CAAYF,MAAtB;;AACA,QAAK,IAAMyI,QAAQ,GAAG,CAAjB,IAAwBC,GAA7B,EAAmC;AACjC,aAAO,KAAKpB,eAAL,EAAP,CADiC,CACF;AAChC;;AAED,QAAI3I,SAAS,GAAG,EAAhB;;AACA,SAAM,IAAIwD,CAAC,GAAG9B,KAAK,GAAGoI,QAAtB,EAAgCtG,CAAC,IAAI9B,KAAK,GAAGoI,QAA7C,EAAuDtG,CAAC,EAAxD,EAA6D;AAC3D,UAAIwG,UAAU,GAAG,KAAK7E,UAAL,GAAkB9I,KAAK,CAACwL,MAAN,CAAcrE,CAAd,EAAiBuG,GAAjB,CAAlB,GAA2CvG,CAA5D;AACA,UAAIJ,KAAK,GAAG,KAAK7B,MAAL,CAAayI,UAAb,CAAZ;;AACA,UAAK5G,KAAL,EAAa;AACXpD,QAAAA,SAAS,GAAGA,SAAS,CAAC4G,MAAV,CAAkBxD,KAAK,CAACuF,eAAN,EAAlB,CAAZ;AACD;AACF;;AACD,WAAO3I,SAAP;AACD,GAnBD;AAqBA;AACA;AACA;AACA;AACA;;;AACA/B,EAAAA,KAAK,CAAC+K,SAAN,GAAkB,UAAUiB,QAAV,EAAqB;AACrC,QAAK,OAAOA,QAAP,IAAmB,QAAxB,EAAmC;AACjC;AACA,aAAO,KAAKnJ,KAAL,CAAYmJ,QAAZ,CAAP;AACD,KAJoC,CAKrC;;;AACA,QAAIC,gBAAgB,GAAG,OAAOD,QAAP,IAAmB,QAAnB,IAA+B,CAACA,QAAQ,CAAC9F,KAAT,CAAgB,aAAhB,CAAvD;;AACA,QAAK+F,gBAAL,EAAwB;AACtB;AACAD,MAAAA,QAAQ,GAAG,KAAKtN,OAAL,CAAawN,aAAb,CAA4BF,QAA5B,CAAX;AACD,KAVoC,CAWrC;;;AACA,WAAO,KAAKX,OAAL,CAAcW,QAAd,CAAP;AACD,GAbD,CAtrByF,CAqsBzF;;;AAEAhM,EAAAA,KAAK,CAACmM,QAAN,GAAiB,YAAW;AAC1B,SAAK7J,SAAL,CAAe,UAAf;AACD,GAFD,CAvsByF,CA2sBzF;;;AAEAtC,EAAAA,KAAK,CAACoM,QAAN,GAAiB,YAAW;AAC1B,SAAKhM,QAAL;AACA,SAAKR,MAAL;AACD,GAHD;;AAKAxB,EAAAA,KAAK,CAACiO,cAAN,CAAsBxO,QAAtB,EAAgC,UAAhC,EAA4C,GAA5C;;AAEAmC,EAAAA,KAAK,CAACJ,MAAN,GAAe,YAAW;AACxB;AACA,QAAK,CAAC,KAAKgC,QAAN,IAAkB,KAAK0K,WAAvB,IAAsC,KAAKC,UAAhD,EAA6D;AAC7D,SAAKxO,OAAL,GAHwB,CAIxB;;AACA,QAAK,KAAKmJ,UAAV,EAAuB;AACrB,WAAKxG,CAAL,GAAStC,KAAK,CAACwL,MAAN,CAAc,KAAKlJ,CAAnB,EAAsB,KAAK4D,cAA3B,CAAT;AACD;;AACD,SAAKvB,aAAL;;AACA,SAAKC,qBAAL;;AACA,SAAKlD,cAAL;AACA,SAAKwC,SAAL,CAAe,QAAf,EAXwB,CAYxB;AACA;;AACA,QAAIsI,eAAe,GAAG,KAAKH,gBAAL,IAAyB,KAAKA,gBAAL,CAAsB,CAAtB,CAA/C;AACA,SAAKO,UAAL,CAAiBJ,eAAjB,EAAkC,KAAlC,EAAyC,IAAzC;AACD,GAhBD,CAptByF,CAsuBzF;;;AACA5K,EAAAA,KAAK,CAACI,QAAN,GAAiB,YAAW;AAC1B,QAAK,CAAC,KAAKzB,OAAL,CAAayB,QAAnB,EAA8B;AAE9B,QAAIoM,YAAY,GAAGnO,gBAAgB,CAAE,KAAKK,OAAP,EAAgB,QAAhB,CAAhB,CAA2C+N,OAA9D,CAH0B,CAI1B;;AACA,QAAKD,YAAY,CAAClD,QAAb,CAAsB,UAAtB,CAAL,EAAyC;AACvC,WAAK5H,QAAL;AACD,KAFD,MAEO;AACL,WAAKgL,UAAL;AACD;AACF,GAVD,CAvuByF,CAmvBzF;AAEA;;;AACA1M,EAAAA,KAAK,CAAC2M,SAAN,GAAkB,UAAUnE,KAAV,EAAkB;AAClC,QAAI;AAAEoE,MAAAA;AAAF,QAAoB7L,QAAxB;AACA,QAAI8L,OAAO,GAAGhP,QAAQ,CAACiP,gBAAT,CAA2BtE,KAAK,CAACuE,GAAjC,CAAd,CAFkC,CAGlC;;AACA,QAAK,CAAC,KAAKpO,OAAL,CAAaW,aAAd,IAA+B,CAACsN,aAAhC,IAAiD,CAACC,OAAvD,EAAiE;AAEjE,QAAIG,SAAS,GAAG,KAAK7L,cAAL,CAAoB8L,IAApB,CAA4B3B,IAAF,IAAYsB,aAAa,KAAKtB,IAAxD,CAAhB;AACA,QAAK0B,SAAL,EAAiBH,OAAO,CAACpL,IAAR,CAAc,IAAd;AAClB,GARD;;AAUA5D,EAAAA,QAAQ,CAACiP,gBAAT,GAA4B;AAC1BI,IAAAA,SAAS,EAAE,YAAW;AACpB,WAAKf,QAAL;AACA,UAAIgB,UAAU,GAAG,KAAKxO,OAAL,CAAa0B,WAAb,GAA2B,MAA3B,GAAoC,UAArD;AACA,WAAM8M,UAAN;AACD,KALyB;AAM1BC,IAAAA,UAAU,EAAE,YAAW;AACrB,WAAKjB,QAAL;AACA,UAAIkB,WAAW,GAAG,KAAK1O,OAAL,CAAa0B,WAAb,GAA2B,UAA3B,GAAwC,MAA1D;AACA,WAAMgN,WAAN;AACD;AAVyB,GAA5B,CAhwByF,CA6wBzF;;AAEArN,EAAAA,KAAK,CAACsN,KAAN,GAAc,YAAW;AACvB,SAAK5O,OAAL,CAAa4O,KAAb,CAAmB;AAAEC,MAAAA,aAAa,EAAE;AAAjB,KAAnB;AACD,GAFD,CA/wByF,CAmxBzF;AAEA;;;AACAvN,EAAAA,KAAK,CAAC0M,UAAN,GAAmB,YAAW;AAC5B,QAAK,CAAC,KAAK9K,QAAX,EAAsB;AAEtB,SAAKlD,OAAL,CAAamD,SAAb,CAAuB2L,MAAvB,CAA8B,kBAA9B;AACA,SAAK9O,OAAL,CAAamD,SAAb,CAAuB2L,MAAvB,CAA8B,cAA9B;AACA,SAAKjD,qBAAL,GAL4B,CAM5B;;AACA,SAAK1H,KAAL,CAAWmB,OAAX,CAAsBC,IAAF,IAAYA,IAAI,CAACwJ,OAAL,EAAhC;AACA,SAAK3M,QAAL,CAAc0M,MAAd,GAR4B,CAS5B;;AACA,SAAK9O,OAAL,CAAayD,MAAb,CAAqB,GAAG,KAAKD,MAAL,CAAYD,QAApC;;AACA,QAAK,KAAKtD,OAAL,CAAaW,aAAlB,EAAkC;AAChC,WAAKZ,OAAL,CAAagP,eAAb,CAA6B,UAA7B;AACA,WAAKhP,OAAL,CAAaiP,mBAAb,CAAkC,SAAlC,EAA6C,IAA7C;AACD,KAd2B,CAe5B;;;AACA,SAAK/L,QAAL,GAAgB,KAAhB;AACA,SAAKU,SAAL,CAAe,YAAf;AACD,GAlBD;;AAoBAtC,EAAAA,KAAK,CAACyN,OAAN,GAAgB,YAAW;AACzB,SAAKf,UAAL;AACAnP,IAAAA,MAAM,CAACoQ,mBAAP,CAA4B,QAA5B,EAAsC,IAAtC;AACA,SAAKC,MAAL;AACA,SAAKtL,SAAL,CAAe,SAAf;;AACA,QAAK/D,MAAM,IAAI,KAAKW,QAApB,EAA+B;AAC7BX,MAAAA,MAAM,CAACsP,UAAP,CAAmB,KAAKnP,OAAxB,EAAiC,UAAjC;AACD;;AACD,WAAO,KAAKA,OAAL,CAAaK,YAApB;AACA,WAAON,SAAS,CAAE,KAAK8B,IAAP,CAAhB;AACD,GAVD,CA1yByF,CAszBzF;;;AAEAL,EAAAA,MAAM,CAACC,MAAP,CAAeH,KAAf,EAAsB7B,gBAAtB,EAxzByF,CA0zBzF;;AAEA;AACA;AACA;AACA;AACA;;AACAN,EAAAA,QAAQ,CAACiQ,IAAT,GAAgB,UAAUxC,IAAV,EAAiB;AAC/BA,IAAAA,IAAI,GAAGlN,KAAK,CAACS,eAAN,CAAuByM,IAAvB,CAAP;AACA,QAAKA,IAAL,EAAY,OAAO7M,SAAS,CAAE6M,IAAI,CAACvM,YAAP,CAAhB;AACb,GAHD;;AAKAX,EAAAA,KAAK,CAAC2P,QAAN,CAAgBlQ,QAAhB,EAA0B,UAA1B;AAEA,MAAI;AAAEmQ,IAAAA;AAAF,MAAoBzQ,MAAxB;;AACA,MAAKgB,MAAM,IAAIyP,aAAf,EAA+B;AAC7BA,IAAAA,aAAa,CAAE,UAAF,EAAcnQ,QAAd,EAAwBU,MAAxB,CAAb;AACD,GA30BwF,CA60BzF;;;AACAV,EAAAA,QAAQ,CAACoQ,SAAT,GAAqB,UAAUC,EAAV,EAAe;AAClC3P,IAAAA,MAAM,GAAG2P,EAAT;AACD,GAFD;;AAIArQ,EAAAA,QAAQ,CAACI,IAAT,GAAgBA,IAAhB;AACAJ,EAAAA,QAAQ,CAACK,KAAT,GAAiBA,KAAjB;AAEA,SAAOL,QAAP;AAEC,CAp3BC,CAAF","sourcesContent":["// Flickity main\n/* eslint-disable max-params */\n( function( window, factory ) {\n  // universal module definition\n  if ( typeof module == 'object' && module.exports ) {\n    // CommonJS\n    module.exports = factory(\n        window,\n        require('ev-emitter'),\n        require('get-size'),\n        require('fizzy-ui-utils'),\n        require('./cell'),\n        require('./slide'),\n        require('./animate'),\n    );\n  } else {\n    // browser global\n    let _Flickity = window.Flickity;\n\n    window.Flickity = factory(\n        window,\n        window.EvEmitter,\n        window.getSize,\n        window.fizzyUIUtils,\n        _Flickity.Cell,\n        _Flickity.Slide,\n        _Flickity.animatePrototype,\n    );\n  }\n\n}( typeof window != 'undefined' ? window : this,\n    function factory( window, EvEmitter, getSize, utils, Cell, Slide, animatePrototype ) {\n/* eslint-enable max-params */\n\n// vars\nconst { getComputedStyle, console } = window;\nlet { jQuery } = window;\n\n// -------------------------- Flickity -------------------------- //\n\n// globally unique identifiers\nlet GUID = 0;\n// internal store of all Flickity intances\nlet instances = {};\n\nfunction Flickity( element, options ) {\n  let queryElement = utils.getQueryElement( element );\n  if ( !queryElement ) {\n    if ( console ) console.error(`Bad element for Flickity: ${queryElement || element}`);\n    return;\n  }\n  this.element = queryElement;\n  // do not initialize twice on same element\n  if ( this.element.flickityGUID ) {\n    let instance = instances[ this.element.flickityGUID ];\n    if ( instance ) instance.option( options );\n    return instance;\n  }\n\n  // add jQuery\n  if ( jQuery ) {\n    this.$element = jQuery( this.element );\n  }\n  // options\n  this.options = { ...this.constructor.defaults };\n  this.option( options );\n\n  // kick things off\n  this._create();\n}\n\nFlickity.defaults = {\n  accessibility: true,\n  // adaptiveHeight: false,\n  cellAlign: 'center',\n  // cellSelector: undefined,\n  // contain: false,\n  freeScrollFriction: 0.075, // friction when free-scrolling\n  friction: 0.28, // friction when selecting\n  namespaceJQueryEvents: true,\n  // initialIndex: 0,\n  percentPosition: true,\n  resize: true,\n  selectedAttraction: 0.025,\n  setGallerySize: true,\n  // watchCSS: false,\n  // wrapAround: false\n};\n\n// hash of methods triggered on _create()\nFlickity.create = {};\n\nlet proto = Flickity.prototype;\n// inherit EventEmitter\nObject.assign( proto, EvEmitter.prototype );\n\nproto._create = function() {\n  let { resize, watchCSS, rightToLeft } = this.options;\n  // add id for Flickity.data\n  let id = this.guid = ++GUID;\n  this.element.flickityGUID = id; // expando\n  instances[ id ] = this; // associate via id\n  // initial properties\n  this.selectedIndex = 0;\n  // how many frames slider has been in same position\n  this.restingFrames = 0;\n  // initial physics properties\n  this.x = 0;\n  this.velocity = 0;\n  this.beginMargin = rightToLeft ? 'marginRight' : 'marginLeft';\n  this.endMargin = rightToLeft ? 'marginLeft' : 'marginRight';\n  // create viewport & slider\n  this.viewport = document.createElement('div');\n  this.viewport.className = 'flickity-viewport';\n  this._createSlider();\n  // used for keyboard navigation\n  this.focusableElems = [ this.element ];\n\n  if ( resize || watchCSS ) {\n    window.addEventListener( 'resize', this );\n  }\n\n  // add listeners from on option\n  for ( let eventName in this.options.on ) {\n    let listener = this.options.on[ eventName ];\n    this.on( eventName, listener );\n  }\n\n  for ( let method in Flickity.create ) {\n    Flickity.create[ method ].call( this );\n  }\n\n  if ( watchCSS ) {\n    this.watchCSS();\n  } else {\n    this.activate();\n  }\n};\n\n/**\n * set options\n * @param {Object} opts - options to extend\n */\nproto.option = function( opts ) {\n  Object.assign( this.options, opts );\n};\n\nproto.activate = function() {\n  if ( this.isActive ) return;\n\n  this.isActive = true;\n  this.element.classList.add('flickity-enabled');\n  if ( this.options.rightToLeft ) {\n    this.element.classList.add('flickity-rtl');\n  }\n\n  this.getSize();\n  // move initial cell elements so they can be loaded as cells\n  let cellElems = this._filterFindCellElements( this.element.children );\n  this.slider.append( ...cellElems );\n  this.viewport.append( this.slider );\n  this.element.append( this.viewport );\n  // get cells from children\n  this.reloadCells();\n\n  if ( this.options.accessibility ) {\n    // allow element to focusable\n    this.element.tabIndex = 0;\n    // listen for key presses\n    this.element.addEventListener( 'keydown', this );\n  }\n\n  this.emitEvent('activate');\n  this.selectInitialIndex();\n  // flag for initial activation, for using initialIndex\n  this.isInitActivated = true;\n  // ready event. #493\n  this.dispatchEvent('ready');\n};\n\n// slider positions the cells\nproto._createSlider = function() {\n  // slider element does all the positioning\n  let slider = document.createElement('div');\n  slider.className = 'flickity-slider';\n  this.slider = slider;\n};\n\nproto._filterFindCellElements = function( elems ) {\n  return utils.filterFindElements( elems, this.options.cellSelector );\n};\n\n// goes through all children\nproto.reloadCells = function() {\n  // collection of item elements\n  this.cells = this._makeCells( this.slider.children );\n  this.positionCells();\n  this._updateWrapShiftCells();\n  this.setGallerySize();\n};\n\n/**\n * turn elements into Flickity.Cells\n * @param {[Array, NodeList, HTMLElement]} elems - elements to make into cells\n * @returns {Array} items - collection of new Flickity Cells\n */\nproto._makeCells = function( elems ) {\n  let cellElems = this._filterFindCellElements( elems );\n\n  // create new Cells for collection\n  return cellElems.map( ( cellElem ) => new Cell( cellElem ) );\n};\n\nproto.getLastCell = function() {\n  return this.cells[ this.cells.length - 1 ];\n};\n\nproto.getLastSlide = function() {\n  return this.slides[ this.slides.length - 1 ];\n};\n\n// positions all cells\nproto.positionCells = function() {\n  // size all cells\n  this._sizeCells( this.cells );\n  // position all cells\n  this._positionCells( 0 );\n};\n\n/**\n * position certain cells\n * @param {Integer} index - which cell to start with\n */\nproto._positionCells = function( index ) {\n  index = index || 0;\n  // also measure maxCellHeight\n  // start 0 if positioning all cells\n  this.maxCellHeight = index ? this.maxCellHeight || 0 : 0;\n  let cellX = 0;\n  // get cellX\n  if ( index > 0 ) {\n    let startCell = this.cells[ index - 1 ];\n    cellX = startCell.x + startCell.size.outerWidth;\n  }\n\n  this.cells.slice( index ).forEach( ( cell ) => {\n    cell.x = cellX;\n    this._renderCellPosition( cell, cellX );\n    cellX += cell.size.outerWidth;\n    this.maxCellHeight = Math.max( cell.size.outerHeight, this.maxCellHeight );\n  } );\n  // keep track of cellX for wrap-around\n  this.slideableWidth = cellX;\n  // slides\n  this.updateSlides();\n  // contain slides target\n  this._containSlides();\n  // update slidesWidth\n  this.slidesWidth = this.cells.length ?\n    this.getLastSlide().target - this.slides[0].target : 0;\n};\n\nproto._renderCellPosition = function( cell, x ) {\n  // render position of cell with in slider\n  let sideOffset = this.options.rightToLeft ? -1 : 1;\n  let renderX = x * sideOffset;\n  if ( this.options.percentPosition ) renderX *= this.size.innerWidth / cell.size.width;\n  let positionValue = this.getPositionValue( renderX );\n  cell.element.style.transform = `translateX( ${positionValue} )`;\n};\n\n/**\n * cell.getSize() on multiple cells\n * @param {Array} cells - cells to size\n */\nproto._sizeCells = function( cells ) {\n  cells.forEach( ( cell ) => cell.getSize() );\n};\n\n// --------------------------  -------------------------- //\n\nproto.updateSlides = function() {\n  this.slides = [];\n  if ( !this.cells.length ) return;\n\n  let { beginMargin, endMargin } = this;\n  let slide = new Slide( beginMargin, endMargin, this.cellAlign );\n  this.slides.push( slide );\n\n  let canCellFit = this._getCanCellFit();\n\n  this.cells.forEach( ( cell, i ) => {\n    // just add cell if first cell in slide\n    if ( !slide.cells.length ) {\n      slide.addCell( cell );\n      return;\n    }\n\n    let slideWidth = ( slide.outerWidth - slide.firstMargin ) +\n      ( cell.size.outerWidth - cell.size[ endMargin ] );\n\n    if ( canCellFit( i, slideWidth ) ) {\n      slide.addCell( cell );\n    } else {\n      // doesn't fit, new slide\n      slide.updateTarget();\n\n      slide = new Slide( beginMargin, endMargin, this.cellAlign );\n      this.slides.push( slide );\n      slide.addCell( cell );\n    }\n  } );\n  // last slide\n  slide.updateTarget();\n  // update .selectedSlide\n  this.updateSelectedSlide();\n};\n\nproto._getCanCellFit = function() {\n  let { groupCells } = this.options;\n  if ( !groupCells ) return () => false;\n\n  if ( typeof groupCells == 'number' ) {\n    // group by number. 3 -> [0,1,2], [3,4,5], ...\n    let number = parseInt( groupCells, 10 );\n    return ( i ) => ( i % number ) !== 0;\n  }\n  // default, group by width of slide\n  let percent = 1;\n  // parse '75%\n  let percentMatch = typeof groupCells == 'string' && groupCells.match( /^(\\d+)%$/ );\n  if ( percentMatch ) percent = parseInt( percentMatch[1], 10 ) / 100;\n  let groupWidth = ( this.size.innerWidth + 1 ) * percent;\n  return ( i, slideWidth ) => slideWidth <= groupWidth;\n};\n\n// alias _init for jQuery plugin .flickity()\nproto._init =\nproto.reposition = function() {\n  this.positionCells();\n  this.positionSliderAtSelected();\n};\n\nproto.getSize = function() {\n  this.size = getSize( this.element );\n  this.setCellAlign();\n  this.cursorPosition = this.size.innerWidth * this.cellAlign;\n};\n\nlet cellAlignShorthands = {\n  left: 0,\n  center: 0.5,\n  right: 1,\n};\n\nproto.setCellAlign = function() {\n  let { cellAlign, rightToLeft } = this.options;\n  let shorthand = cellAlignShorthands[ cellAlign ];\n  this.cellAlign = shorthand !== undefined ? shorthand : cellAlign;\n  if ( rightToLeft ) this.cellAlign = 1 - this.cellAlign;\n};\n\nproto.setGallerySize = function() {\n  if ( !this.options.setGallerySize ) return;\n\n  let height = this.options.adaptiveHeight && this.selectedSlide ?\n    this.selectedSlide.height : this.maxCellHeight;\n  this.viewport.style.height = `${height}px`;\n};\n\nproto._updateWrapShiftCells = function() {\n  // update isWrapping\n  this.isWrapping = this.getIsWrapping();\n  // only for wrap-around\n  if ( !this.isWrapping ) return;\n\n  // unshift previous cells\n  this._unshiftCells( this.beforeShiftCells );\n  this._unshiftCells( this.afterShiftCells );\n  // get before cells\n  // initial gap\n  let beforeGapX = this.cursorPosition;\n  let lastIndex = this.cells.length - 1;\n  this.beforeShiftCells = this._getGapCells( beforeGapX, lastIndex, -1 );\n  // get after cells\n  // ending gap between last cell and end of gallery viewport\n  let afterGapX = this.size.innerWidth - this.cursorPosition;\n  // start cloning at first cell, working forwards\n  this.afterShiftCells = this._getGapCells( afterGapX, 0, 1 );\n};\n\nproto.getIsWrapping = function() {\n  let { wrapAround } = this.options;\n  if ( !wrapAround || this.slides.length < 2 ) return false;\n\n  if ( wrapAround !== 'fill' ) return true;\n  // check that slides can fit\n\n  let gapWidth = this.slideableWidth - this.size.innerWidth;\n  if ( gapWidth > this.size.innerWidth ) return true; // gap * 2x big, all good\n  // check that content width - shifting cell is bigger than viewport width\n  for ( let cell of this.cells ) {\n    if ( cell.size.outerWidth > gapWidth ) return false;\n  }\n  return true;\n};\n\nproto._getGapCells = function( gapX, cellIndex, increment ) {\n  // keep adding cells until the cover the initial gap\n  let cells = [];\n  while ( gapX > 0 ) {\n    let cell = this.cells[ cellIndex ];\n    if ( !cell ) break;\n\n    cells.push( cell );\n    cellIndex += increment;\n    gapX -= cell.size.outerWidth;\n  }\n  return cells;\n};\n\n// ----- contain & wrap ----- //\n\n// contain cell targets so no excess sliding\nproto._containSlides = function() {\n  let isContaining = this.options.contain && !this.isWrapping &&\n      this.cells.length;\n  if ( !isContaining ) return;\n\n  let contentWidth = this.slideableWidth - this.getLastCell().size[ this.endMargin ];\n  // content is less than gallery size\n  let isContentSmaller = contentWidth < this.size.innerWidth;\n  if ( isContentSmaller ) {\n    // all cells fit inside gallery\n    this.slides.forEach( ( slide ) => {\n      slide.target = contentWidth * this.cellAlign;\n    } );\n  } else {\n    // contain to bounds\n    let beginBound = this.cursorPosition + this.cells[0].size[ this.beginMargin ];\n    let endBound = contentWidth - this.size.innerWidth * ( 1 - this.cellAlign );\n    this.slides.forEach( ( slide ) => {\n      slide.target = Math.max( slide.target, beginBound );\n      slide.target = Math.min( slide.target, endBound );\n    } );\n  }\n};\n\n// ----- events ----- //\n\n/**\n * emits events via eventEmitter and jQuery events\n * @param {String} type - name of event\n * @param {Event} event - original event\n * @param {Array} args - extra arguments\n */\nproto.dispatchEvent = function( type, event, args ) {\n  let emitArgs = event ? [ event ].concat( args ) : args;\n  this.emitEvent( type, emitArgs );\n\n  if ( jQuery && this.$element ) {\n    // default trigger with type if no event\n    type += this.options.namespaceJQueryEvents ? '.flickity' : '';\n    let $event = type;\n    if ( event ) {\n      // create jQuery event\n      let jQEvent = new jQuery.Event( event );\n      jQEvent.type = type;\n      $event = jQEvent;\n    }\n    this.$element.trigger( $event, args );\n  }\n};\n\nconst unidraggerEvents = [\n  'dragStart',\n  'dragMove',\n  'dragEnd',\n  'pointerDown',\n  'pointerMove',\n  'pointerEnd',\n  'staticClick',\n];\n\nlet _emitEvent = proto.emitEvent;\nproto.emitEvent = function( eventName, args ) {\n  if ( eventName === 'staticClick' ) {\n    // add cellElem and cellIndex args to staticClick\n    let clickedCell = this.getParentCell( args[0].target );\n    let cellElem = clickedCell && clickedCell.element;\n    let cellIndex = clickedCell && this.cells.indexOf( clickedCell );\n    args = args.concat( cellElem, cellIndex );\n  }\n  // do regular thing\n  _emitEvent.call( this, eventName, args );\n  // duck-punch in jQuery events for Unidragger events\n  let isUnidraggerEvent = unidraggerEvents.includes( eventName );\n  if ( !isUnidraggerEvent || !jQuery || !this.$element ) return;\n\n  eventName += this.options.namespaceJQueryEvents ? '.flickity' : '';\n  let event = args.shift( 0 );\n  let jQEvent = new jQuery.Event( event );\n  jQEvent.type = eventName;\n  this.$element.trigger( jQEvent, args );\n};\n\n// -------------------------- select -------------------------- //\n\n/**\n * @param {Integer} index - index of the slide\n * @param {Boolean} isWrap - will wrap-around to last/first if at the end\n * @param {Boolean} isInstant - will immediately set position at selected cell\n */\nproto.select = function( index, isWrap, isInstant ) {\n  if ( !this.isActive ) return;\n\n  index = parseInt( index, 10 );\n  this._wrapSelect( index );\n\n  if ( this.isWrapping || isWrap ) {\n    index = utils.modulo( index, this.slides.length );\n  }\n  // bail if invalid index\n  if ( !this.slides[ index ] ) return;\n\n  let prevIndex = this.selectedIndex;\n  this.selectedIndex = index;\n  this.updateSelectedSlide();\n  if ( isInstant ) {\n    this.positionSliderAtSelected();\n  } else {\n    this.startAnimation();\n  }\n  if ( this.options.adaptiveHeight ) {\n    this.setGallerySize();\n  }\n  // events\n  this.dispatchEvent( 'select', null, [ index ] );\n  // change event if new index\n  if ( index !== prevIndex ) {\n    this.dispatchEvent( 'change', null, [ index ] );\n  }\n};\n\n// wraps position for wrapAround, to move to closest slide. #113\nproto._wrapSelect = function( index ) {\n  if ( !this.isWrapping ) return;\n\n  const { selectedIndex, slideableWidth, slides: { length } } = this;\n  // shift index for wrap, do not wrap dragSelect\n  if ( !this.isDragSelect ) {\n    let wrapIndex = utils.modulo( index, length );\n    // go to shortest\n    let delta = Math.abs( wrapIndex - selectedIndex );\n    let backWrapDelta = Math.abs( ( wrapIndex + length ) - selectedIndex );\n    let forewardWrapDelta = Math.abs( ( wrapIndex - length ) - selectedIndex );\n    if ( backWrapDelta < delta ) {\n      index += length;\n    } else if ( forewardWrapDelta < delta ) {\n      index -= length;\n    }\n  }\n\n  // wrap position so slider is within normal area\n  if ( index < 0 ) {\n    this.x -= slideableWidth;\n  } else if ( index >= length ) {\n    this.x += slideableWidth;\n  }\n};\n\nproto.previous = function( isWrap, isInstant ) {\n  this.select( this.selectedIndex - 1, isWrap, isInstant );\n};\n\nproto.next = function( isWrap, isInstant ) {\n  this.select( this.selectedIndex + 1, isWrap, isInstant );\n};\n\nproto.updateSelectedSlide = function() {\n  let slide = this.slides[ this.selectedIndex ];\n  // selectedIndex could be outside of slides, if triggered before resize()\n  if ( !slide ) return;\n\n  // unselect previous selected slide\n  this.unselectSelectedSlide();\n  // update new selected slide\n  this.selectedSlide = slide;\n  slide.select();\n  this.selectedCells = slide.cells;\n  this.selectedElements = slide.getCellElements();\n  // HACK: selectedCell & selectedElement is first cell in slide, backwards compatibility\n  this.selectedCell = slide.cells[0];\n  this.selectedElement = this.selectedElements[0];\n};\n\nproto.unselectSelectedSlide = function() {\n  if ( this.selectedSlide ) this.selectedSlide.unselect();\n};\n\nproto.selectInitialIndex = function() {\n  let initialIndex = this.options.initialIndex;\n  // already activated, select previous selectedIndex\n  if ( this.isInitActivated ) {\n    this.select( this.selectedIndex, false, true );\n    return;\n  }\n  // select with selector string\n  if ( initialIndex && typeof initialIndex == 'string' ) {\n    let cell = this.queryCell( initialIndex );\n    if ( cell ) {\n      this.selectCell( initialIndex, false, true );\n      return;\n    }\n  }\n\n  let index = 0;\n  // select with number\n  if ( initialIndex && this.slides[ initialIndex ] ) {\n    index = initialIndex;\n  }\n  // select instantly\n  this.select( index, false, true );\n};\n\n/**\n * select slide from number or cell element\n * @param {[Element, Number]} value - zero-based index or element to select\n * @param {Boolean} isWrap - enables wrapping around for extra index\n * @param {Boolean} isInstant - disables slide animation\n */\nproto.selectCell = function( value, isWrap, isInstant ) {\n  // get cell\n  let cell = this.queryCell( value );\n  if ( !cell ) return;\n\n  let index = this.getCellSlideIndex( cell );\n  this.select( index, isWrap, isInstant );\n};\n\nproto.getCellSlideIndex = function( cell ) {\n  // get index of slide that has cell\n  let cellSlide = this.slides.find( ( slide ) => slide.cells.includes( cell ) );\n  return this.slides.indexOf( cellSlide );\n};\n\n// -------------------------- get cells -------------------------- //\n\n/**\n * get Flickity.Cell, given an Element\n * @param {Element} elem - matching cell element\n * @returns {Flickity.Cell} cell - matching cell\n */\nproto.getCell = function( elem ) {\n  // loop through cells to get the one that matches\n  for ( let cell of this.cells ) {\n    if ( cell.element === elem ) return cell;\n  }\n};\n\n/**\n * get collection of Flickity.Cells, given Elements\n * @param {[Element, Array, NodeList]} elems - multiple elements\n * @returns {Array} cells - Flickity.Cells\n */\nproto.getCells = function( elems ) {\n  elems = utils.makeArray( elems );\n  return elems.map( ( elem ) => this.getCell( elem ) ).filter( Boolean );\n};\n\n/**\n * get cell elements\n * @returns {Array} cellElems\n */\nproto.getCellElements = function() {\n  return this.cells.map( ( cell ) => cell.element );\n};\n\n/**\n * get parent cell from an element\n * @param {Element} elem - child element\n * @returns {Flickit.Cell} cell - parent cell\n */\nproto.getParentCell = function( elem ) {\n  // first check if elem is cell\n  let cell = this.getCell( elem );\n  if ( cell ) return cell;\n\n  // try to get parent cell elem\n  let closest = elem.closest('.flickity-slider > *');\n  return this.getCell( closest );\n};\n\n/**\n * get cells adjacent to a slide\n * @param {Integer} adjCount - number of adjacent slides\n * @param {Integer} index - index of slide to start\n * @returns {Array} cells - array of Flickity.Cells\n */\nproto.getAdjacentCellElements = function( adjCount, index ) {\n  if ( !adjCount ) return this.selectedSlide.getCellElements();\n\n  index = index === undefined ? this.selectedIndex : index;\n\n  let len = this.slides.length;\n  if ( 1 + ( adjCount * 2 ) >= len ) {\n    return this.getCellElements(); // get all\n  }\n\n  let cellElems = [];\n  for ( let i = index - adjCount; i <= index + adjCount; i++ ) {\n    let slideIndex = this.isWrapping ? utils.modulo( i, len ) : i;\n    let slide = this.slides[ slideIndex ];\n    if ( slide ) {\n      cellElems = cellElems.concat( slide.getCellElements() );\n    }\n  }\n  return cellElems;\n};\n\n/**\n * select slide from number or cell element\n * @param {[Element, String, Number]} selector - element, selector string, or index\n * @returns {Flickity.Cell} - matching cell\n */\nproto.queryCell = function( selector ) {\n  if ( typeof selector == 'number' ) {\n    // use number as index\n    return this.cells[ selector ];\n  }\n  // do not select invalid selectors from hash: #123, #/. #791\n  let isSelectorString = typeof selector == 'string' && !selector.match( /^[#.]?[\\d/]/ );\n  if ( isSelectorString ) {\n    // use string as selector, get element\n    selector = this.element.querySelector( selector );\n  }\n  // get cell from element\n  return this.getCell( selector );\n};\n\n// -------------------------- events -------------------------- //\n\nproto.uiChange = function() {\n  this.emitEvent('uiChange');\n};\n\n// ----- resize ----- //\n\nproto.onresize = function() {\n  this.watchCSS();\n  this.resize();\n};\n\nutils.debounceMethod( Flickity, 'onresize', 150 );\n\nproto.resize = function() {\n  // #1177 disable resize behavior when animating or dragging for iOS 15\n  if ( !this.isActive || this.isAnimating || this.isDragging ) return;\n  this.getSize();\n  // wrap values\n  if ( this.isWrapping ) {\n    this.x = utils.modulo( this.x, this.slideableWidth );\n  }\n  this.positionCells();\n  this._updateWrapShiftCells();\n  this.setGallerySize();\n  this.emitEvent('resize');\n  // update selected index for group slides, instant\n  // TODO: position can be lost between groups of various numbers\n  let selectedElement = this.selectedElements && this.selectedElements[0];\n  this.selectCell( selectedElement, false, true );\n};\n\n// watches the :after property, activates/deactivates\nproto.watchCSS = function() {\n  if ( !this.options.watchCSS ) return;\n\n  let afterContent = getComputedStyle( this.element, ':after' ).content;\n  // activate if :after { content: 'flickity' }\n  if ( afterContent.includes('flickity') ) {\n    this.activate();\n  } else {\n    this.deactivate();\n  }\n};\n\n// ----- keydown ----- //\n\n// go previous/next if left/right keys pressed\nproto.onkeydown = function( event ) {\n  let { activeElement } = document;\n  let handler = Flickity.keyboardHandlers[ event.key ];\n  // only work if element is in focus\n  if ( !this.options.accessibility || !activeElement || !handler ) return;\n\n  let isFocused = this.focusableElems.some( ( elem ) => activeElement === elem );\n  if ( isFocused ) handler.call( this );\n};\n\nFlickity.keyboardHandlers = {\n  ArrowLeft: function() {\n    this.uiChange();\n    let leftMethod = this.options.rightToLeft ? 'next' : 'previous';\n    this[ leftMethod ]();\n  },\n  ArrowRight: function() {\n    this.uiChange();\n    let rightMethod = this.options.rightToLeft ? 'previous' : 'next';\n    this[ rightMethod ]();\n  },\n};\n\n// ----- focus ----- //\n\nproto.focus = function() {\n  this.element.focus({ preventScroll: true });\n};\n\n// -------------------------- destroy -------------------------- //\n\n// deactivate all Flickity functionality, but keep stuff available\nproto.deactivate = function() {\n  if ( !this.isActive ) return;\n\n  this.element.classList.remove('flickity-enabled');\n  this.element.classList.remove('flickity-rtl');\n  this.unselectSelectedSlide();\n  // destroy cells\n  this.cells.forEach( ( cell ) => cell.destroy() );\n  this.viewport.remove();\n  // move child elements back into element\n  this.element.append( ...this.slider.children );\n  if ( this.options.accessibility ) {\n    this.element.removeAttribute('tabIndex');\n    this.element.removeEventListener( 'keydown', this );\n  }\n  // set flags\n  this.isActive = false;\n  this.emitEvent('deactivate');\n};\n\nproto.destroy = function() {\n  this.deactivate();\n  window.removeEventListener( 'resize', this );\n  this.allOff();\n  this.emitEvent('destroy');\n  if ( jQuery && this.$element ) {\n    jQuery.removeData( this.element, 'flickity' );\n  }\n  delete this.element.flickityGUID;\n  delete instances[ this.guid ];\n};\n\n// -------------------------- prototype -------------------------- //\n\nObject.assign( proto, animatePrototype );\n\n// -------------------------- extras -------------------------- //\n\n/**\n * get Flickity instance from element\n * @param {[Element, String]} elem - element or selector string\n * @returns {Flickity} - Flickity instance\n */\nFlickity.data = function( elem ) {\n  elem = utils.getQueryElement( elem );\n  if ( elem ) return instances[ elem.flickityGUID ];\n};\n\nutils.htmlInit( Flickity, 'flickity' );\n\nlet { jQueryBridget } = window;\nif ( jQuery && jQueryBridget ) {\n  jQueryBridget( 'flickity', Flickity, jQuery );\n}\n\n// set internal jQuery, for Webpack + jQuery v3, #478\nFlickity.setJQuery = function( jq ) {\n  jQuery = jq;\n};\n\nFlickity.Cell = Cell;\nFlickity.Slide = Slide;\n\nreturn Flickity;\n\n} ) );\n"]},"metadata":{},"sourceType":"script"}