{"ast":null,"code":"// animate\n(function (window, factory) {\n  // universal module definition\n  if (typeof module == 'object' && module.exports) {\n    // CommonJS\n    module.exports = factory(require('fizzy-ui-utils'));\n  } else {\n    // browser global\n    window.Flickity = window.Flickity || {};\n    window.Flickity.animatePrototype = factory(window.fizzyUIUtils);\n  }\n})(typeof window != 'undefined' ? window : this, function factory(utils) {\n  // -------------------------- animate -------------------------- //\n  let proto = {};\n\n  proto.startAnimation = function () {\n    if (this.isAnimating) return;\n    this.isAnimating = true;\n    this.restingFrames = 0;\n    this.animate();\n  };\n\n  proto.animate = function () {\n    this.applyDragForce();\n    this.applySelectedAttraction();\n    let previousX = this.x;\n    this.integratePhysics();\n    this.positionSlider();\n    this.settle(previousX); // animate next frame\n\n    if (this.isAnimating) requestAnimationFrame(() => this.animate());\n  };\n\n  proto.positionSlider = function () {\n    let x = this.x; // wrap position around\n\n    if (this.isWrapping) {\n      x = utils.modulo(x, this.slideableWidth) - this.slideableWidth;\n      this.shiftWrapCells(x);\n    }\n\n    this.setTranslateX(x, this.isAnimating);\n    this.dispatchScrollEvent();\n  };\n\n  proto.setTranslateX = function (x, is3d) {\n    x += this.cursorPosition; // reverse if right-to-left and using transform\n\n    if (this.options.rightToLeft) x = -x;\n    let translateX = this.getPositionValue(x); // use 3D transforms for hardware acceleration on iOS\n    // but use 2D when settled, for better font-rendering\n\n    this.slider.style.transform = is3d ? `translate3d(${translateX},0,0)` : `translateX(${translateX})`;\n  };\n\n  proto.dispatchScrollEvent = function () {\n    let firstSlide = this.slides[0];\n    if (!firstSlide) return;\n    let positionX = -this.x - firstSlide.target;\n    let progress = positionX / this.slidesWidth;\n    this.dispatchEvent('scroll', null, [progress, positionX]);\n  };\n\n  proto.positionSliderAtSelected = function () {\n    if (!this.cells.length) return;\n    this.x = -this.selectedSlide.target;\n    this.velocity = 0; // stop wobble\n\n    this.positionSlider();\n  };\n\n  proto.getPositionValue = function (position) {\n    if (this.options.percentPosition) {\n      // percent position, round to 2 digits, like 12.34%\n      return Math.round(position / this.size.innerWidth * 10000) * 0.01 + '%';\n    } else {\n      // pixel positioning\n      return Math.round(position) + 'px';\n    }\n  };\n\n  proto.settle = function (previousX) {\n    // keep track of frames where x hasn't moved\n    let isResting = !this.isPointerDown && Math.round(this.x * 100) === Math.round(previousX * 100);\n    if (isResting) this.restingFrames++; // stop animating if resting for 3 or more frames\n\n    if (this.restingFrames > 2) {\n      this.isAnimating = false;\n      delete this.isFreeScrolling; // render position with translateX when settled\n\n      this.positionSlider();\n      this.dispatchEvent('settle', null, [this.selectedIndex]);\n    }\n  };\n\n  proto.shiftWrapCells = function (x) {\n    // shift before cells\n    let beforeGap = this.cursorPosition + x;\n\n    this._shiftCells(this.beforeShiftCells, beforeGap, -1); // shift after cells\n\n\n    let afterGap = this.size.innerWidth - (x + this.slideableWidth + this.cursorPosition);\n\n    this._shiftCells(this.afterShiftCells, afterGap, 1);\n  };\n\n  proto._shiftCells = function (cells, gap, shift) {\n    cells.forEach(cell => {\n      let cellShift = gap > 0 ? shift : 0;\n\n      this._wrapShiftCell(cell, cellShift);\n\n      gap -= cell.size.outerWidth;\n    });\n  };\n\n  proto._unshiftCells = function (cells) {\n    if (!cells || !cells.length) return;\n    cells.forEach(cell => this._wrapShiftCell(cell, 0));\n  }; // @param {Integer} shift - 0, 1, or -1\n\n\n  proto._wrapShiftCell = function (cell, shift) {\n    this._renderCellPosition(cell, cell.x + this.slideableWidth * shift);\n  }; // -------------------------- physics -------------------------- //\n\n\n  proto.integratePhysics = function () {\n    this.x += this.velocity;\n    this.velocity *= this.getFrictionFactor();\n  };\n\n  proto.applyForce = function (force) {\n    this.velocity += force;\n  };\n\n  proto.getFrictionFactor = function () {\n    return 1 - this.options[this.isFreeScrolling ? 'freeScrollFriction' : 'friction'];\n  };\n\n  proto.getRestingPosition = function () {\n    // my thanks to Steven Wittens, who simplified this math greatly\n    return this.x + this.velocity / (1 - this.getFrictionFactor());\n  };\n\n  proto.applyDragForce = function () {\n    if (!this.isDraggable || !this.isPointerDown) return; // change the position to drag position by applying force\n\n    let dragVelocity = this.dragX - this.x;\n    let dragForce = dragVelocity - this.velocity;\n    this.applyForce(dragForce);\n  };\n\n  proto.applySelectedAttraction = function () {\n    // do not attract if pointer down or no slides\n    let dragDown = this.isDraggable && this.isPointerDown;\n    if (dragDown || this.isFreeScrolling || !this.slides.length) return;\n    let distance = this.selectedSlide.target * -1 - this.x;\n    let force = distance * this.options.selectedAttraction;\n    this.applyForce(force);\n  };\n\n  return proto;\n});","map":{"version":3,"sources":["/Users/oti/Documents/QuiLib/node_modules/flickity/js/animate.js"],"names":["window","factory","module","exports","require","Flickity","animatePrototype","fizzyUIUtils","utils","proto","startAnimation","isAnimating","restingFrames","animate","applyDragForce","applySelectedAttraction","previousX","x","integratePhysics","positionSlider","settle","requestAnimationFrame","isWrapping","modulo","slideableWidth","shiftWrapCells","setTranslateX","dispatchScrollEvent","is3d","cursorPosition","options","rightToLeft","translateX","getPositionValue","slider","style","transform","firstSlide","slides","positionX","target","progress","slidesWidth","dispatchEvent","positionSliderAtSelected","cells","length","selectedSlide","velocity","position","percentPosition","Math","round","size","innerWidth","isResting","isPointerDown","isFreeScrolling","selectedIndex","beforeGap","_shiftCells","beforeShiftCells","afterGap","afterShiftCells","gap","shift","forEach","cell","cellShift","_wrapShiftCell","outerWidth","_unshiftCells","_renderCellPosition","getFrictionFactor","applyForce","force","getRestingPosition","isDraggable","dragVelocity","dragX","dragForce","dragDown","distance","selectedAttraction"],"mappings":"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","sourcesContent":["// animate\n( function( window, factory ) {\n  // universal module definition\n  if ( typeof module == 'object' && module.exports ) {\n    // CommonJS\n    module.exports = factory( require('fizzy-ui-utils') );\n  } else {\n    // browser global\n    window.Flickity = window.Flickity || {};\n    window.Flickity.animatePrototype = factory( window.fizzyUIUtils );\n  }\n\n}( typeof window != 'undefined' ? window : this, function factory( utils ) {\n\n// -------------------------- animate -------------------------- //\n\nlet proto = {};\n\nproto.startAnimation = function() {\n  if ( this.isAnimating ) return;\n\n  this.isAnimating = true;\n  this.restingFrames = 0;\n  this.animate();\n};\n\nproto.animate = function() {\n  this.applyDragForce();\n  this.applySelectedAttraction();\n\n  let previousX = this.x;\n\n  this.integratePhysics();\n  this.positionSlider();\n  this.settle( previousX );\n  // animate next frame\n  if ( this.isAnimating ) requestAnimationFrame( () => this.animate() );\n};\n\nproto.positionSlider = function() {\n  let x = this.x;\n  // wrap position around\n  if ( this.isWrapping ) {\n    x = utils.modulo( x, this.slideableWidth ) - this.slideableWidth;\n    this.shiftWrapCells( x );\n  }\n\n  this.setTranslateX( x, this.isAnimating );\n  this.dispatchScrollEvent();\n};\n\nproto.setTranslateX = function( x, is3d ) {\n  x += this.cursorPosition;\n  // reverse if right-to-left and using transform\n  if ( this.options.rightToLeft ) x = -x;\n  let translateX = this.getPositionValue( x );\n  // use 3D transforms for hardware acceleration on iOS\n  // but use 2D when settled, for better font-rendering\n  this.slider.style.transform = is3d ?\n    `translate3d(${translateX},0,0)` : `translateX(${translateX})`;\n};\n\nproto.dispatchScrollEvent = function() {\n  let firstSlide = this.slides[0];\n  if ( !firstSlide ) return;\n\n  let positionX = -this.x - firstSlide.target;\n  let progress = positionX / this.slidesWidth;\n  this.dispatchEvent( 'scroll', null, [ progress, positionX ] );\n};\n\nproto.positionSliderAtSelected = function() {\n  if ( !this.cells.length ) return;\n\n  this.x = -this.selectedSlide.target;\n  this.velocity = 0; // stop wobble\n  this.positionSlider();\n};\n\nproto.getPositionValue = function( position ) {\n  if ( this.options.percentPosition ) {\n    // percent position, round to 2 digits, like 12.34%\n    return ( Math.round( ( position / this.size.innerWidth ) * 10000 ) * 0.01 ) + '%';\n  } else {\n    // pixel positioning\n    return Math.round( position ) + 'px';\n  }\n};\n\nproto.settle = function( previousX ) {\n  // keep track of frames where x hasn't moved\n  let isResting = !this.isPointerDown &&\n      Math.round( this.x * 100 ) === Math.round( previousX * 100 );\n  if ( isResting ) this.restingFrames++;\n  // stop animating if resting for 3 or more frames\n  if ( this.restingFrames > 2 ) {\n    this.isAnimating = false;\n    delete this.isFreeScrolling;\n    // render position with translateX when settled\n    this.positionSlider();\n    this.dispatchEvent( 'settle', null, [ this.selectedIndex ] );\n  }\n};\n\nproto.shiftWrapCells = function( x ) {\n  // shift before cells\n  let beforeGap = this.cursorPosition + x;\n  this._shiftCells( this.beforeShiftCells, beforeGap, -1 );\n  // shift after cells\n  let afterGap = this.size.innerWidth - ( x + this.slideableWidth + this.cursorPosition );\n  this._shiftCells( this.afterShiftCells, afterGap, 1 );\n};\n\nproto._shiftCells = function( cells, gap, shift ) {\n  cells.forEach( ( cell ) => {\n    let cellShift = gap > 0 ? shift : 0;\n    this._wrapShiftCell( cell, cellShift );\n    gap -= cell.size.outerWidth;\n  } );\n};\n\nproto._unshiftCells = function( cells ) {\n  if ( !cells || !cells.length ) return;\n\n  cells.forEach( ( cell ) => this._wrapShiftCell( cell, 0 ) );\n};\n\n// @param {Integer} shift - 0, 1, or -1\nproto._wrapShiftCell = function( cell, shift ) {\n  this._renderCellPosition( cell, cell.x + this.slideableWidth * shift );\n};\n\n// -------------------------- physics -------------------------- //\n\nproto.integratePhysics = function() {\n  this.x += this.velocity;\n  this.velocity *= this.getFrictionFactor();\n};\n\nproto.applyForce = function( force ) {\n  this.velocity += force;\n};\n\nproto.getFrictionFactor = function() {\n  return 1 - this.options[ this.isFreeScrolling ? 'freeScrollFriction' : 'friction' ];\n};\n\nproto.getRestingPosition = function() {\n  // my thanks to Steven Wittens, who simplified this math greatly\n  return this.x + this.velocity / ( 1 - this.getFrictionFactor() );\n};\n\nproto.applyDragForce = function() {\n  if ( !this.isDraggable || !this.isPointerDown ) return;\n\n  // change the position to drag position by applying force\n  let dragVelocity = this.dragX - this.x;\n  let dragForce = dragVelocity - this.velocity;\n  this.applyForce( dragForce );\n};\n\nproto.applySelectedAttraction = function() {\n  // do not attract if pointer down or no slides\n  let dragDown = this.isDraggable && this.isPointerDown;\n  if ( dragDown || this.isFreeScrolling || !this.slides.length ) return;\n\n  let distance = this.selectedSlide.target * -1 - this.x;\n  let force = distance * this.options.selectedAttraction;\n  this.applyForce( force );\n};\n\nreturn proto;\n\n} ) );\n"]},"metadata":{},"sourceType":"script"}