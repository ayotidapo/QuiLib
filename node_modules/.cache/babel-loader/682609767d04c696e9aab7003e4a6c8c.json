{"ast":null,"code":"// add, remove cell\n(function (window, factory) {\n  // universal module definition\n  if (typeof module == 'object' && module.exports) {\n    // CommonJS\n    module.exports = factory(require('./core'), require('fizzy-ui-utils'));\n  } else {\n    // browser global\n    factory(window.Flickity, window.fizzyUIUtils);\n  }\n})(typeof window != 'undefined' ? window : this, function factory(Flickity, utils) {\n  // append cells to a document fragment\n  function getCellsFragment(cells) {\n    let fragment = document.createDocumentFragment();\n    cells.forEach(cell => fragment.appendChild(cell.element));\n    return fragment;\n  } // -------------------------- add/remove cell prototype -------------------------- //\n\n\n  let proto = Flickity.prototype;\n  /**\n   * Insert, prepend, or append cells\n   * @param {[Element, Array, NodeList]} elems - Elements to insert\n   * @param {Integer} index - Zero-based number to insert\n   */\n\n  proto.insert = function (elems, index) {\n    let cells = this._makeCells(elems);\n\n    if (!cells || !cells.length) return;\n    let len = this.cells.length; // default to append\n\n    index = index === undefined ? len : index; // add cells with document fragment\n\n    let fragment = getCellsFragment(cells); // append to slider\n\n    let isAppend = index === len;\n\n    if (isAppend) {\n      this.slider.appendChild(fragment);\n    } else {\n      let insertCellElement = this.cells[index].element;\n      this.slider.insertBefore(fragment, insertCellElement);\n    } // add to this.cells\n\n\n    if (index === 0) {\n      // prepend, add to start\n      this.cells = cells.concat(this.cells);\n    } else if (isAppend) {\n      // append, add to end\n      this.cells = this.cells.concat(cells);\n    } else {\n      // insert in this.cells\n      let endCells = this.cells.splice(index, len - index);\n      this.cells = this.cells.concat(cells).concat(endCells);\n    }\n\n    this._sizeCells(cells);\n\n    this.cellChange(index);\n    this.positionSliderAtSelected();\n  };\n\n  proto.append = function (elems) {\n    this.insert(elems, this.cells.length);\n  };\n\n  proto.prepend = function (elems) {\n    this.insert(elems, 0);\n  };\n  /**\n   * Remove cells\n   * @param {[Element, Array, NodeList]} elems - ELements to remove\n   */\n\n\n  proto.remove = function (elems) {\n    let cells = this.getCells(elems);\n    if (!cells || !cells.length) return;\n    let minCellIndex = this.cells.length - 1; // remove cells from collection & DOM\n\n    cells.forEach(cell => {\n      cell.remove();\n      let index = this.cells.indexOf(cell);\n      minCellIndex = Math.min(index, minCellIndex);\n      utils.removeFrom(this.cells, cell);\n    });\n    this.cellChange(minCellIndex);\n    this.positionSliderAtSelected();\n  };\n  /**\n   * logic to be run after a cell's size changes\n   * @param {Element} elem - cell's element\n   */\n\n\n  proto.cellSizeChange = function (elem) {\n    let cell = this.getCell(elem);\n    if (!cell) return;\n    cell.getSize();\n    let index = this.cells.indexOf(cell);\n    this.cellChange(index); // do not position slider after lazy load\n  };\n  /**\n   * logic any time a cell is changed: added, removed, or size changed\n   * @param {Integer} changedCellIndex - index of the changed cell, optional\n   */\n\n\n  proto.cellChange = function (changedCellIndex) {\n    let prevSelectedElem = this.selectedElement;\n\n    this._positionCells(changedCellIndex);\n\n    this._updateWrapShiftCells();\n\n    this.setGallerySize(); // update selectedIndex, try to maintain position & select previous selected element\n\n    let cell = this.getCell(prevSelectedElem);\n    if (cell) this.selectedIndex = this.getCellSlideIndex(cell);\n    this.selectedIndex = Math.min(this.slides.length - 1, this.selectedIndex);\n    this.emitEvent('cellChange', [changedCellIndex]); // position slider\n\n    this.select(this.selectedIndex);\n  }; // -----  ----- //\n\n\n  return Flickity;\n});","map":{"version":3,"sources":["/Users/oti/Documents/QuiLib/node_modules/flickity/js/add-remove-cell.js"],"names":["window","factory","module","exports","require","Flickity","fizzyUIUtils","utils","getCellsFragment","cells","fragment","document","createDocumentFragment","forEach","cell","appendChild","element","proto","prototype","insert","elems","index","_makeCells","length","len","undefined","isAppend","slider","insertCellElement","insertBefore","concat","endCells","splice","_sizeCells","cellChange","positionSliderAtSelected","append","prepend","remove","getCells","minCellIndex","indexOf","Math","min","removeFrom","cellSizeChange","elem","getCell","getSize","changedCellIndex","prevSelectedElem","selectedElement","_positionCells","_updateWrapShiftCells","setGallerySize","selectedIndex","getCellSlideIndex","slides","emitEvent","select"],"mappings":"AAAA;AACE,WAAUA,MAAV,EAAkBC,OAAlB,EAA4B;AAC5B;AACA,MAAK,OAAOC,MAAP,IAAiB,QAAjB,IAA6BA,MAAM,CAACC,OAAzC,EAAmD;AACjD;AACAD,IAAAA,MAAM,CAACC,OAAP,GAAiBF,OAAO,CACpBG,OAAO,CAAC,QAAD,CADa,EAEpBA,OAAO,CAAC,gBAAD,CAFa,CAAxB;AAID,GAND,MAMO;AACL;AACAH,IAAAA,OAAO,CACHD,MAAM,CAACK,QADJ,EAEHL,MAAM,CAACM,YAFJ,CAAP;AAID;AAEF,CAhBC,EAgBC,OAAON,MAAP,IAAiB,WAAjB,GAA+BA,MAA/B,GAAwC,IAhBzC,EAgB+C,SAASC,OAAT,CAAkBI,QAAlB,EAA4BE,KAA5B,EAAoC;AAErF;AACA,WAASC,gBAAT,CAA2BC,KAA3B,EAAmC;AACjC,QAAIC,QAAQ,GAAGC,QAAQ,CAACC,sBAAT,EAAf;AACAH,IAAAA,KAAK,CAACI,OAAN,CAAiBC,IAAF,IAAYJ,QAAQ,CAACK,WAAT,CAAsBD,IAAI,CAACE,OAA3B,CAA3B;AACA,WAAON,QAAP;AACD,GAPoF,CASrF;;;AAEA,MAAIO,KAAK,GAAGZ,QAAQ,CAACa,SAArB;AAEA;AACA;AACA;AACA;AACA;;AACAD,EAAAA,KAAK,CAACE,MAAN,GAAe,UAAUC,KAAV,EAAiBC,KAAjB,EAAyB;AACtC,QAAIZ,KAAK,GAAG,KAAKa,UAAL,CAAiBF,KAAjB,CAAZ;;AACA,QAAK,CAACX,KAAD,IAAU,CAACA,KAAK,CAACc,MAAtB,EAA+B;AAE/B,QAAIC,GAAG,GAAG,KAAKf,KAAL,CAAWc,MAArB,CAJsC,CAKtC;;AACAF,IAAAA,KAAK,GAAGA,KAAK,KAAKI,SAAV,GAAsBD,GAAtB,GAA4BH,KAApC,CANsC,CAOtC;;AACA,QAAIX,QAAQ,GAAGF,gBAAgB,CAAEC,KAAF,CAA/B,CARsC,CAStC;;AACA,QAAIiB,QAAQ,GAAGL,KAAK,KAAKG,GAAzB;;AACA,QAAKE,QAAL,EAAgB;AACd,WAAKC,MAAL,CAAYZ,WAAZ,CAAyBL,QAAzB;AACD,KAFD,MAEO;AACL,UAAIkB,iBAAiB,GAAG,KAAKnB,KAAL,CAAYY,KAAZ,EAAoBL,OAA5C;AACA,WAAKW,MAAL,CAAYE,YAAZ,CAA0BnB,QAA1B,EAAoCkB,iBAApC;AACD,KAhBqC,CAiBtC;;;AACA,QAAKP,KAAK,KAAK,CAAf,EAAmB;AACjB;AACA,WAAKZ,KAAL,GAAaA,KAAK,CAACqB,MAAN,CAAc,KAAKrB,KAAnB,CAAb;AACD,KAHD,MAGO,IAAKiB,QAAL,EAAgB;AACrB;AACA,WAAKjB,KAAL,GAAa,KAAKA,KAAL,CAAWqB,MAAX,CAAmBrB,KAAnB,CAAb;AACD,KAHM,MAGA;AACL;AACA,UAAIsB,QAAQ,GAAG,KAAKtB,KAAL,CAAWuB,MAAX,CAAmBX,KAAnB,EAA0BG,GAAG,GAAGH,KAAhC,CAAf;AACA,WAAKZ,KAAL,GAAa,KAAKA,KAAL,CAAWqB,MAAX,CAAmBrB,KAAnB,EAA2BqB,MAA3B,CAAmCC,QAAnC,CAAb;AACD;;AAED,SAAKE,UAAL,CAAiBxB,KAAjB;;AACA,SAAKyB,UAAL,CAAiBb,KAAjB;AACA,SAAKc,wBAAL;AACD,GAjCD;;AAmCAlB,EAAAA,KAAK,CAACmB,MAAN,GAAe,UAAUhB,KAAV,EAAkB;AAC/B,SAAKD,MAAL,CAAaC,KAAb,EAAoB,KAAKX,KAAL,CAAWc,MAA/B;AACD,GAFD;;AAIAN,EAAAA,KAAK,CAACoB,OAAN,GAAgB,UAAUjB,KAAV,EAAkB;AAChC,SAAKD,MAAL,CAAaC,KAAb,EAAoB,CAApB;AACD,GAFD;AAIA;AACA;AACA;AACA;;;AACAH,EAAAA,KAAK,CAACqB,MAAN,GAAe,UAAUlB,KAAV,EAAkB;AAC/B,QAAIX,KAAK,GAAG,KAAK8B,QAAL,CAAenB,KAAf,CAAZ;AACA,QAAK,CAACX,KAAD,IAAU,CAACA,KAAK,CAACc,MAAtB,EAA+B;AAE/B,QAAIiB,YAAY,GAAG,KAAK/B,KAAL,CAAWc,MAAX,GAAoB,CAAvC,CAJ+B,CAK/B;;AACAd,IAAAA,KAAK,CAACI,OAAN,CAAiBC,IAAF,IAAY;AACzBA,MAAAA,IAAI,CAACwB,MAAL;AACA,UAAIjB,KAAK,GAAG,KAAKZ,KAAL,CAAWgC,OAAX,CAAoB3B,IAApB,CAAZ;AACA0B,MAAAA,YAAY,GAAGE,IAAI,CAACC,GAAL,CAAUtB,KAAV,EAAiBmB,YAAjB,CAAf;AACAjC,MAAAA,KAAK,CAACqC,UAAN,CAAkB,KAAKnC,KAAvB,EAA8BK,IAA9B;AACD,KALD;AAOA,SAAKoB,UAAL,CAAiBM,YAAjB;AACA,SAAKL,wBAAL;AACD,GAfD;AAiBA;AACA;AACA;AACA;;;AACAlB,EAAAA,KAAK,CAAC4B,cAAN,GAAuB,UAAUC,IAAV,EAAiB;AACtC,QAAIhC,IAAI,GAAG,KAAKiC,OAAL,CAAcD,IAAd,CAAX;AACA,QAAK,CAAChC,IAAN,EAAa;AAEbA,IAAAA,IAAI,CAACkC,OAAL;AAEA,QAAI3B,KAAK,GAAG,KAAKZ,KAAL,CAAWgC,OAAX,CAAoB3B,IAApB,CAAZ;AACA,SAAKoB,UAAL,CAAiBb,KAAjB,EAPsC,CAQtC;AACD,GATD;AAWA;AACA;AACA;AACA;;;AACAJ,EAAAA,KAAK,CAACiB,UAAN,GAAmB,UAAUe,gBAAV,EAA6B;AAC9C,QAAIC,gBAAgB,GAAG,KAAKC,eAA5B;;AACA,SAAKC,cAAL,CAAqBH,gBAArB;;AACA,SAAKI,qBAAL;;AACA,SAAKC,cAAL,GAJ8C,CAK9C;;AACA,QAAIxC,IAAI,GAAG,KAAKiC,OAAL,CAAcG,gBAAd,CAAX;AACA,QAAKpC,IAAL,EAAY,KAAKyC,aAAL,GAAqB,KAAKC,iBAAL,CAAwB1C,IAAxB,CAArB;AACZ,SAAKyC,aAAL,GAAqBb,IAAI,CAACC,GAAL,CAAU,KAAKc,MAAL,CAAYlC,MAAZ,GAAqB,CAA/B,EAAkC,KAAKgC,aAAvC,CAArB;AAEA,SAAKG,SAAL,CAAgB,YAAhB,EAA8B,CAAET,gBAAF,CAA9B,EAV8C,CAW9C;;AACA,SAAKU,MAAL,CAAa,KAAKJ,aAAlB;AACD,GAbD,CArGqF,CAoHrF;;;AAEA,SAAOlD,QAAP;AAEC,CAxIC,CAAF","sourcesContent":["// add, remove cell\n( function( window, factory ) {\n  // universal module definition\n  if ( typeof module == 'object' && module.exports ) {\n    // CommonJS\n    module.exports = factory(\n        require('./core'),\n        require('fizzy-ui-utils'),\n    );\n  } else {\n    // browser global\n    factory(\n        window.Flickity,\n        window.fizzyUIUtils,\n    );\n  }\n\n}( typeof window != 'undefined' ? window : this, function factory( Flickity, utils ) {\n\n// append cells to a document fragment\nfunction getCellsFragment( cells ) {\n  let fragment = document.createDocumentFragment();\n  cells.forEach( ( cell ) => fragment.appendChild( cell.element ) );\n  return fragment;\n}\n\n// -------------------------- add/remove cell prototype -------------------------- //\n\nlet proto = Flickity.prototype;\n\n/**\n * Insert, prepend, or append cells\n * @param {[Element, Array, NodeList]} elems - Elements to insert\n * @param {Integer} index - Zero-based number to insert\n */\nproto.insert = function( elems, index ) {\n  let cells = this._makeCells( elems );\n  if ( !cells || !cells.length ) return;\n\n  let len = this.cells.length;\n  // default to append\n  index = index === undefined ? len : index;\n  // add cells with document fragment\n  let fragment = getCellsFragment( cells );\n  // append to slider\n  let isAppend = index === len;\n  if ( isAppend ) {\n    this.slider.appendChild( fragment );\n  } else {\n    let insertCellElement = this.cells[ index ].element;\n    this.slider.insertBefore( fragment, insertCellElement );\n  }\n  // add to this.cells\n  if ( index === 0 ) {\n    // prepend, add to start\n    this.cells = cells.concat( this.cells );\n  } else if ( isAppend ) {\n    // append, add to end\n    this.cells = this.cells.concat( cells );\n  } else {\n    // insert in this.cells\n    let endCells = this.cells.splice( index, len - index );\n    this.cells = this.cells.concat( cells ).concat( endCells );\n  }\n\n  this._sizeCells( cells );\n  this.cellChange( index );\n  this.positionSliderAtSelected();\n};\n\nproto.append = function( elems ) {\n  this.insert( elems, this.cells.length );\n};\n\nproto.prepend = function( elems ) {\n  this.insert( elems, 0 );\n};\n\n/**\n * Remove cells\n * @param {[Element, Array, NodeList]} elems - ELements to remove\n */\nproto.remove = function( elems ) {\n  let cells = this.getCells( elems );\n  if ( !cells || !cells.length ) return;\n\n  let minCellIndex = this.cells.length - 1;\n  // remove cells from collection & DOM\n  cells.forEach( ( cell ) => {\n    cell.remove();\n    let index = this.cells.indexOf( cell );\n    minCellIndex = Math.min( index, minCellIndex );\n    utils.removeFrom( this.cells, cell );\n  } );\n\n  this.cellChange( minCellIndex );\n  this.positionSliderAtSelected();\n};\n\n/**\n * logic to be run after a cell's size changes\n * @param {Element} elem - cell's element\n */\nproto.cellSizeChange = function( elem ) {\n  let cell = this.getCell( elem );\n  if ( !cell ) return;\n\n  cell.getSize();\n\n  let index = this.cells.indexOf( cell );\n  this.cellChange( index );\n  // do not position slider after lazy load\n};\n\n/**\n * logic any time a cell is changed: added, removed, or size changed\n * @param {Integer} changedCellIndex - index of the changed cell, optional\n */\nproto.cellChange = function( changedCellIndex ) {\n  let prevSelectedElem = this.selectedElement;\n  this._positionCells( changedCellIndex );\n  this._updateWrapShiftCells();\n  this.setGallerySize();\n  // update selectedIndex, try to maintain position & select previous selected element\n  let cell = this.getCell( prevSelectedElem );\n  if ( cell ) this.selectedIndex = this.getCellSlideIndex( cell );\n  this.selectedIndex = Math.min( this.slides.length - 1, this.selectedIndex );\n\n  this.emitEvent( 'cellChange', [ changedCellIndex ] );\n  // position slider\n  this.select( this.selectedIndex );\n};\n\n// -----  ----- //\n\nreturn Flickity;\n\n} ) );\n"]},"metadata":{},"sourceType":"script"}